/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={315:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,'*{margin:0;padding:0;box-sizing:border-box;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Open Sans","Helvetica Neue",sans-serif}body{background-color:#eee;color:#3d3d3d;font-size:18px}.container{max-width:1200px;margin:0 auto}.page-title{text-align:center}.add-todo,.todo-list{background-color:#dcdcdc;border:1px solid #ccc9c9;margin-top:30px;border-radius:10px;padding:10px 20px}.add-todo__header{text-align:center}.add-todo__block{margin-top:10px;margin-bottom:20px}.add-todo__label{display:block;margin-bottom:5px}.add-todo__textarea,.add-todo__title{width:100%;border:none;outline:none;padding:10px 20px;border-radius:5px}.add-todo__add-type{display:block;margin-bottom:10px;display:flex}.add-todo__add-type input{display:inline;margin-left:20px;border:none;border-radius:5px;outline:none;padding:2px 10px}.add-todo__add-button{background-color:#3d3d3d;color:#fff;font-size:24px;font-weight:bold;border:none;outline:none;padding:10px 30px;border-radius:10px;cursor:pointer;display:block;margin:0 auto}.add-todo__add-button:hover{background-color:#575757}.add-todo__add-button:active{background-color:red}.type{background-color:#3d3d3d;padding:2px 10px;border-radius:50px;color:#fff;margin-right:10px;cursor:pointer}.type button{border:none;outline:none;background-color:transparent;color:inherit;cursor:pointer;margin-left:10px}.todo-list__header{text-align:center}.todo-item{background-color:#eee;border:1px solid #ccc9c9;margin-top:30px;border-radius:10px;padding:10px 20px}.todo-item--complete{background-color:#8fe8ca}.todo-item__header{font-size:24px;font-weight:bold;margin-bottom:10px}.todo-item__title{margin-left:20px}.todo-item__text{margin-bottom:10px}.todo-item__types{margin-bottom:10px}.todo-item__footer *+*{margin-left:10px}.todo-item__btn{cursor:pointer}.todo-item__btn:hover{color:#ccc9c9;text-decoration:underline}',"",{version:3,sources:["webpack://./src/styles/style.scss","webpack://./src/styles/vars.scss"],names:[],mappings:"AAEA,EACE,QAAA,CACA,SAAA,CACA,qBAAA,CACA,8HAAA,CAIF,KACE,qBCXS,CDYT,aCRW,CDSX,cAAA,CAGF,WACE,gBAAA,CACA,aAAA,CAGF,YACE,iBAAA,CAGF,qBAEE,wBCzBW,CD0BX,wBAAA,CACA,eAAA,CACA,kBAAA,CACA,iBAAA,CAIA,kBACE,iBAAA,CAGF,iBACE,eAAA,CACA,kBAAA,CAGF,iBACE,aAAA,CACA,iBAAA,CAGF,qCAGE,UAAA,CACA,WAAA,CACA,YAAA,CACA,iBAAA,CACA,iBAAA,CAUF,oBACE,aAAA,CACA,kBAAA,CACA,YAAA,CAEA,0BACE,cAAA,CACA,gBAAA,CACA,WAAA,CACA,iBAAA,CACA,YAAA,CACA,gBAAA,CAIJ,sBACE,wBC9ES,CD+ET,UC9EU,CD+EV,cAAA,CACA,gBAAA,CACA,WAAA,CACA,YAAA,CACA,iBAAA,CACA,kBAAA,CACA,cAAA,CACA,aAAA,CACA,aAAA,CAEA,4BACE,wBAAA,CAEF,6BACE,oBAAA,CAKN,MACE,wBCpGW,CDqGX,gBAAA,CACA,kBAAA,CACA,UAAA,CACA,iBAAA,CACA,cAAA,CAEA,aACE,WAAA,CACA,YAAA,CACA,4BAAA,CACA,aAAA,CACA,cAAA,CACA,gBAAA,CAKF,mBACE,iBAAA,CAIJ,WACE,qBChIS,CDiIT,wBAAA,CACA,eAAA,CACA,kBAAA,CACA,iBAAA,CAEA,qBACE,wBCjIU,CDoIZ,mBACE,cAAA,CACA,gBAAA,CACA,kBAAA,CAGF,kBACE,gBAAA,CAEF,iBACE,kBAAA,CAEF,kBACE,kBAAA,CAGA,uBACE,gBAAA,CAIJ,gBACE,cAAA,CAEA,sBACE,aChKY,CDiKZ,yBAAA",sourcesContent:["@import 'vars.scss';\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,\n    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n\nbody {\n  background-color: $color-bg;\n  color: $color-main;\n  font-size: 18px;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.page-title {\n  text-align: center;\n}\n\n.add-todo,\n.todo-list {\n  background-color: $color-grey;\n  border: 1px solid $color-grey-dark;\n  margin-top: 30px;\n  border-radius: 10px;\n  padding: 10px 20px;\n}\n\n.add-todo {\n  &__header {\n    text-align: center;\n  }\n\n  &__block {\n    margin-top: 10px;\n    margin-bottom: 20px;\n  }\n\n  &__label {\n    display: block;\n    margin-bottom: 5px;\n  }\n\n  &__textarea,\n  &__title {\n    // margin-top: 10px;\n    width: 100%;\n    border: none;\n    outline: none;\n    padding: 10px 20px;\n    border-radius: 5px;\n    // :focus {\n    //   background-color: red;\n    //   border: none;\n    // }\n  }\n\n  &__types {\n  }\n\n  &__add-type {\n    display: block;\n    margin-bottom: 10px;\n    display: flex;\n\n    input {\n      display: inline;\n      margin-left: 20px;\n      border: none;\n      border-radius: 5px;\n      outline: none;\n      padding: 2px 10px;\n    }\n  }\n\n  &__add-button {\n    background-color: $color-main;\n    color: $color-white;\n    font-size: 24px;\n    font-weight: bold;\n    border: none;\n    outline: none;\n    padding: 10px 30px;\n    border-radius: 10px;\n    cursor: pointer;\n    display: block;\n    margin: 0 auto;\n\n    &:hover {\n      background-color: lighten($color-main, 10%);\n    }\n    &:active {\n      background-color: red;\n    }\n  }\n}\n\n.type {\n  background-color: $color-main;\n  padding: 2px 10px;\n  border-radius: 50px;\n  color: white;\n  margin-right: 10px;\n  cursor: pointer;\n\n  button {\n    border: none;\n    outline: none;\n    background-color: transparent;\n    color: inherit;\n    cursor: pointer;\n    margin-left: 10px;\n  }\n}\n\n.todo-list {\n  &__header {\n    text-align: center;\n  }\n}\n\n.todo-item {\n  background-color: $color-bg;\n  border: 1px solid $color-grey-dark;\n  margin-top: 30px;\n  border-radius: 10px;\n  padding: 10px 20px;\n\n  &--complete {\n    background-color: $color-green;\n  }\n\n  &__header {\n    font-size: 24px;\n    font-weight: bold;\n    margin-bottom: 10px;\n  }\n\n  &__title {\n    margin-left: 20px;\n  }\n  &__text {\n    margin-bottom: 10px;\n  }\n  &__types {\n    margin-bottom: 10px;\n  }\n  &__footer {\n    * + * {\n      margin-left: 10px;\n    }\n  }\n\n  &__btn {\n    cursor: pointer;\n\n    &:hover {\n      color: $color-grey-dark;\n      text-decoration: underline;\n    }\n  }\n}\n","$color-bg: #eee;\n$color-red: #d31818;\n$color-grey: rgb(220, 220, 220);\n$color-grey-dark: rgb(204, 201, 201);\n$color-main: rgb(61, 61, 61);\n$color-white: #fff;\n$color-green: #8fe8ca;\n"],sourceRoot:""}]);const l=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),s="/*# ".concat(u," */"),c=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([s]).join("\n")}return[o].join("\n")}},418:e=>{var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,l,u=a(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},448:(e,t,n)=>{var r=n(294),a=n(418),o=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function m(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function _(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,A=60106,S=60107,E=60108,x=60114,C=60109,O=60110,T=60112,N=60113,P=60120,L=60115,R=60116,j=60121,M=60128,z=60129,D=60130,B=60131;if("function"==typeof Symbol&&Symbol.for){var I=Symbol.for;k=I("react.element"),A=I("react.portal"),S=I("react.fragment"),E=I("react.strict_mode"),x=I("react.profiler"),C=I("react.provider"),O=I("react.context"),T=I("react.forward_ref"),N=I("react.suspense"),P=I("react.suspense_list"),L=I("react.memo"),R=I("react.lazy"),j=I("react.block"),I("react.scope"),M=I("react.opaque.id"),z=I("react.debug_trace_mode"),D=I("react.offscreen"),B=I("react.legacy_hidden")}var U,V="function"==typeof Symbol&&Symbol.iterator;function F(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function W(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var $=!1;function H(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l])return"\n"+a[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function K(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case A:return"Portal";case x:return"Profiler";case E:return"StrictMode";case N:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return q(e.type);case j:return q(e._render);case R:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=G(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function se(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,me=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=_e(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var ke=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ae(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Ce=null,Oe=null;function Te(e){if(e=Jr(e)){if("function"!=typeof xe)throw Error(i(280));var t=e.stateNode;t&&(t=ea(t),xe(e.stateNode,e.type,t))}}function Ne(e){Ce?Oe?Oe.push(e):Oe=[e]:Ce=e}function Pe(){if(Ce){var e=Ce,t=Oe;if(Oe=Ce=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Le(e,t){return e(t)}function Re(e,t,n,r,a){return e(t,n,r,a)}function je(){}var Me=Le,ze=!1,De=!1;function Be(){null===Ce&&null===Oe||(je(),Pe())}function Ie(e,t){var n=e.stateNode;if(null===n)return null;var r=ea(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(ve){Ue=!1}function Fe(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var We=!1,$e=null,He=!1,Ke=null,qe={onError:function(e){We=!0,$e=e}};function Qe(e,t,n,r,a,o,i,l,u){We=!1,$e=null,Fe.apply(qe,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ge(e)!==e)throw Error(i(188))}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Ze,et,tt,nt,rt=!1,at=[],ot=null,it=null,lt=null,ut=new Map,st=new Map,ct=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function dt(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":it=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function ht(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=dt(t,n,r,a,o),null!==t&&null!==(t=Jr(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function vt(e){var t=Xr(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){mt(e)&&n.delete(t)}function yt(){for(rt=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==ot&&mt(ot)&&(ot=null),null!==it&&mt(it)&&(it=null),null!==lt&&mt(lt)&&(lt=null),ut.forEach(gt),st.forEach(gt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,yt)))}function _t(e){function t(t){return bt(t,e)}if(0<at.length){bt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ot&&bt(ot,e),null!==it&&bt(it,e),null!==lt&&bt(lt,e),ut.forEach(t),st.forEach(t),n=0;n<ct.length;n++)(r=ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)vt(n),null===n.blockedOn&&ct.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},At={},St={};function Et(e){if(At[e])return At[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return At[e]=n[t];return e}f&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var xt=Et("animationend"),Ct=Et("animationiteration"),Ot=Et("animationstart"),Tt=Et("transitionend"),Nt=new Map,Pt=new Map,Lt=["abort","abort",xt,"animationEnd",Ct,"animationIteration",Ot,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Pt.set(r,t),Nt.set(r,a),s(a,[r])}}(0,o.unstable_now)();var jt=8;function Mt(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!=(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!=(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!=(t=4186112&e)?(jt=6,t):0!=(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!=(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,a=0,o=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==o)r=o,a=jt=15;else if(0!=(o=134217727&n)){var u=o&~i;0!==u?(r=Mt(u),a=jt):0!=(l&=o)&&(r=Mt(l),a=jt)}else 0!=(o=n&~i)?(r=Mt(o),a=jt):0!==l&&(r=Mt(l),a=jt);if(0===r)return 0;if(r=n&((0>(r=31-Ft(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Mt(t),a<=jt)return t;jt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Ft(t)),r|=e[n],t&=~a;return r}function Dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Bt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=It(24&~t))?Bt(10,t):e;case 10:return 0===(e=It(192&~t))?Bt(8,t):e;case 8:return 0===(e=It(3584&~t))&&0===(e=It(4186112&~t))&&(e=512),e;case 2:return 0===(t=It(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function It(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ft(t)]=n}var Ft=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2,Ht=o.unstable_UserBlockingPriority,Kt=o.unstable_runWithPriority,qt=!0;function Qt(e,t,n,r){ze||je();var a=Yt,o=ze;ze=!0;try{Re(a,e,t,n,r)}finally{(ze=o)||Be()}}function Gt(e,t,n,r){Kt(Ht,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){var a;if(qt)if((a=0==(4&t))&&0<at.length&&-1<ft.indexOf(e))e=dt(null,e,t,n,r),at.push(e);else{var o=Xt(e,t,n,r);if(null===o)a&&pt(e,r);else{if(a){if(-1<ft.indexOf(e))return e=dt(o,e,t,n,r),void at.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return ot=ht(ot,e,t,n,r,a),!0;case"dragenter":return it=ht(it,e,t,n,r,a),!0;case"mouseover":return lt=ht(lt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return ut.set(o,ht(ut.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,st.set(o,ht(st.get(o)||null,e,t,n,r,a)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Nr(e,t,r,null,n)}}}function Xt(e,t,n,r){var a=Ee(r);if(null!==(a=Xr(a))){var o=Ge(a);if(null===o)a=null;else{var i=o.tag;if(13===i){if(null!==(a=Ye(o)))return a;a=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;a=null}else o!==a&&(a=null)}}return Nr(e,t,r,a,n),null}var Jt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return en=a.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function an(){return!1}function on(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rn:an,this.isPropagationStopped=an,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,un,sn,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=on(cn),dn=a({},cn,{view:0,detail:0}),pn=on(dn),hn=a({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(ln=e.screenX-sn.screenX,un=e.screenY-sn.screenY):un=ln=0,sn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),vn=on(hn),mn=on(a({},hn,{dataTransfer:0})),gn=on(a({},dn,{relatedTarget:0})),yn=on(a({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=on(a({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=on(a({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},An={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=An[e])&&!!t[e]}function En(){return Sn}var xn=on(a({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Cn=on(a({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=on(a({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Tn=on(a({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=on(a({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Pn=[9,13,27,32],Ln=f&&"CompositionEvent"in window,Rn=null;f&&"documentMode"in document&&(Rn=document.documentMode);var jn=f&&"TextEvent"in window&&!Rn,Mn=f&&(!Ln||Rn&&8<Rn&&11>=Rn),zn=String.fromCharCode(32),Dn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function In(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Wn(e,t,n,r){Ne(r),0<(t=Lr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Hn=null;function Kn(e){Sr(e,0)}function qn(e){if(X(Zr(e)))return e}function Qn(e,t){if("change"===e)return t}var Gn=!1;if(f){var Yn;if(f){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Yn=Xn}else Yn=!1;Gn=Yn&&(!document.documentMode||9<document.documentMode)}function Zn(){$n&&($n.detachEvent("onpropertychange",er),Hn=$n=null)}function er(e){if("value"===e.propertyName&&qn(Hn)){var t=[];if(Wn(t,Hn,e,Ee(e)),e=Kn,ze)e(t);else{ze=!0;try{Le(e,t)}finally{ze=!1,Be()}}}}function tr(e,t,n){"focusin"===e?(Zn(),Hn=n,($n=t).attachEvent("onpropertychange",er)):"focusout"===e&&Zn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Hn)}function rr(e,t){if("click"===e)return qn(t)}function ar(e,t){if("input"===e||"change"===e)return qn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ir=Object.prototype.hasOwnProperty;function lr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ir.call(t,n[r])||!or(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function cr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?cr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,hr=null,vr=null,mr=null,gr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==hr||hr!==J(r)||(r="selectionStart"in(r=hr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},mr&&lr(mr,r)||(mr=r,0<(r=Lr(vr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Lt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),_r=0;_r<br.length;_r++)Pt.set(br[_r],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var wr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(wr));function Ar(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,l,u,s){if(Qe.apply(this,arguments),We){if(!We)throw Error(i(198));var c=$e;We=!1,$e=null,He||(He=!0,Ke=c)}}(r,t,void 0,e),e.currentTarget=null}function Sr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Ar(a,l,s),o=u}}}if(He)throw e=Ke,He=!1,Ke=null,e}function Er(e,t){var n=ta(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var xr="_reactListening"+Math.random().toString(36).slice(2);function Cr(e){e[xr]||(e[xr]=!0,l.forEach((function(t){kr.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;a|=2,o=r}var i=ta(o),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(a|=4),Tr(o,e,a,t),i.add(l))}function Tr(e,t,n,r){var a=Pt.get(t);switch(void 0===a?2:a){case 0:a=Qt;break;case 1:a=Gt;break;default:a=Yt}n=a.bind(null,t,n,e),a=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=Xr(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{Me(e,t,n)}finally{De=!1,Be()}}((function(){var r=o,a=Ee(n),i=[];e:{var l=Nt.get(e);if(void 0!==l){var u=fn,s=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":u=xn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case xt:case Ct:case Ot:u=yn;break;case Tt:u=Tn;break;case"scroll":u=pn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Cn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=Ie(h,d))&&c.push(Pr(h,v,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Xr(s)&&!s[Gr])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Xr(s):null)&&(s!==(f=Ge(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=vn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Cn,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:Zr(u),p=null==s?l:Zr(s),(l=new c(v,h+"leave",u,n,a)).target=f,l.relatedTarget=p,v=null,Xr(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,v=c),f=v,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Rr(p))h++;for(p=0,v=d;v;v=Rr(v))p++;for(;0<h-p;)c=Rr(c),h--;for(;0<p-h;)d=Rr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Rr(c),d=Rr(d)}c=null}else c=null;null!==u&&jr(i,l,u,c,!1),null!==s&&null!==f&&jr(i,f,s,c,!0)}if("select"===(u=(l=r?Zr(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var m=Qn;else if(Fn(l))if(Gn)m=ar;else{m=nr;var g=tr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=rr);switch(m&&(m=m(e,r))?Wn(i,m,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ae(l,"number",l.value)),g=r?Zr(r):window,e){case"focusin":(Fn(g)||"true"===g.contentEditable)&&(hr=g,vr=r,mr=null);break;case"focusout":mr=vr=hr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,yr(i,n,a);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(i,n,a)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(y=tn()):(Zt="value"in(Jt=a)?Jt.value:Jt.textContent,Un=!0)),0<(g=Lr(r,b)).length&&(b=new _n(b,e,null,n,a),i.push({event:b,listeners:g}),(y||null!==(y=In(n)))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return In(t);case"keypress":return 32!==t.which?null:(Dn=!0,zn);case"textInput":return(e=t.data)===zn&&Dn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Ln&&Bn(e,t)?(e=tn(),en=Zt=Jt=null,Un=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Lr(r,"onBeforeInput")).length&&(a=new _n("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Sr(i,t)}))}function Pr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Lr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Ie(e,n))&&r.unshift(Pr(e,o,a)),null!=(o=Ie(e,t))&&r.push(Pr(e,o,a))),e=e.return}return r}function Rr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Ie(n,o))&&i.unshift(Pr(n,u,l)):a||null!=(u=Ie(n,o))&&i.push(Pr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Mr(){}var zr=null,Dr=null;function Br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ir(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Fr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $r(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,Kr=Math.random().toString(36).slice(2),qr="__reactFiber$"+Kr,Qr="__reactProps$"+Kr,Gr="__reactContainer$"+Kr,Yr="__reactEvents$"+Kr;function Xr(e){var t=e[qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gr]||n[qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=$r(e);null!==e;){if(n=e[qr])return n;e=$r(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[qr]||e[Gr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Zr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ea(e){return e[Qr]||null}function ta(e){var t=e[Yr];return void 0===t&&(t=e[Yr]=new Set),t}var na=[],ra=-1;function aa(e){return{current:e}}function oa(e){0>ra||(e.current=na[ra],na[ra]=null,ra--)}function ia(e,t){ra++,na[ra]=e.current,e.current=t}var la={},ua=aa(la),sa=aa(!1),ca=la;function fa(e,t){var n=e.type.contextTypes;if(!n)return la;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function da(e){return null!=e.childContextTypes}function pa(){oa(sa),oa(ua)}function ha(e,t,n){if(ua.current!==la)throw Error(i(168));ia(ua,t),ia(sa,n)}function va(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,q(t)||"Unknown",o));return a({},n,r)}function ma(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||la,ca=ua.current,ia(ua,e),ia(sa,sa.current),!0}function ga(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=va(e,t,ca),r.__reactInternalMemoizedMergedChildContext=e,oa(sa),oa(ua),ia(ua,e)):oa(sa),ia(sa,n)}var ya=null,ba=null,_a=o.unstable_runWithPriority,wa=o.unstable_scheduleCallback,ka=o.unstable_cancelCallback,Aa=o.unstable_shouldYield,Sa=o.unstable_requestPaint,Ea=o.unstable_now,xa=o.unstable_getCurrentPriorityLevel,Ca=o.unstable_ImmediatePriority,Oa=o.unstable_UserBlockingPriority,Ta=o.unstable_NormalPriority,Na=o.unstable_LowPriority,Pa=o.unstable_IdlePriority,La={},Ra=void 0!==Sa?Sa:function(){},ja=null,Ma=null,za=!1,Da=Ea(),Ba=1e4>Da?Ea:function(){return Ea()-Da};function Ia(){switch(xa()){case Ca:return 99;case Oa:return 98;case Ta:return 97;case Na:return 96;case Pa:return 95;default:throw Error(i(332))}}function Ua(e){switch(e){case 99:return Ca;case 98:return Oa;case 97:return Ta;case 96:return Na;case 95:return Pa;default:throw Error(i(332))}}function Va(e,t){return e=Ua(e),_a(e,t)}function Fa(e,t,n){return e=Ua(e),wa(e,t,n)}function Wa(){if(null!==Ma){var e=Ma;Ma=null,ka(e)}$a()}function $a(){if(!za&&null!==ja){za=!0;var e=0;try{var t=ja;Va(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),ja=null}catch(t){throw null!==ja&&(ja=ja.slice(e+1)),wa(Ca,Wa),t}finally{za=!1}}}var Ha=w.ReactCurrentBatchConfig;function Ka(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var qa=aa(null),Qa=null,Ga=null,Ya=null;function Xa(){Ya=Ga=Qa=null}function Ja(e){var t=qa.current;oa(qa),e.type._context._currentValue=t}function Za(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function eo(e,t){Qa=e,Ya=Ga=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Li=!0),e.firstContext=null)}function to(e,t){if(Ya!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Ya=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ga){if(null===Qa)throw Error(i(308));Ga=t,Qa.dependencies={lanes:0,firstContext:t,responders:null}}else Ga=Ga.next=t;return e._currentValue}var no=!1;function ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function oo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function io(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function uo(e,t,n,r){var o=e.updateQueue;no=!1;var i=o.firstBaseUpdate,l=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=o.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,v=i;switch(u=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=v.payload)?h.call(p,d,u):h))break e;d=a({},d,u);break e;case 2:no=!0}}null!==i.callback&&(e.flags|=32,null===(u=o.effects)?o.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=o.shared.pending))break;i=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===f&&(s=d),o.baseState=s,o.firstBaseUpdate=c,o.lastBaseUpdate=f,jl|=l,e.lanes=l,e.memoizedState=d}}function so(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var co=(new r.Component).refs;function fo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ou(),a=iu(e),o=oo(r,a);o.payload=t,null!=n&&(o.callback=n),io(e,o),lu(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ou(),a=iu(e),o=oo(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),io(e,o),lu(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ou(),r=iu(e),a=oo(n,r);a.tag=2,null!=t&&(a.callback=t),io(e,a),lu(e,r,n)}};function ho(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(a,o))}function vo(e,t,n){var r=!1,a=la,o=t.contextType;return"object"==typeof o&&null!==o?o=to(o):(a=da(t)?ca:ua.current,o=(r=null!=(r=t.contextTypes))?fa(e,a):la),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function mo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function go(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=co,ro(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=to(o):(o=da(t)?ca:ua.current,a.context=fa(e,o)),uo(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(fo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&po.enqueueReplaceState(a,a.state,null),uo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var yo=Array.isArray;function bo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===co&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function _o(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function wo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Bu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Fu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=bo(e,t,n),r.return=e,r):((r=Iu(n.type,n.key,n.props,null,e.mode,r)).ref=bo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Uu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Fu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Iu(t.type,t.key,t.props,null,e.mode,n)).ref=bo(e,null,t),n.return=e,n;case A:return(t=Wu(t,e.mode,n)).return=e,t}if(yo(t)||F(t))return(t=Uu(t,e.mode,n,null)).return=e,t;_o(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?n.type===S?f(e,t,n.props.children,r,a):s(e,t,n,r):null;case A:return n.key===a?c(e,t,n,r):null}if(yo(n)||F(n))return null!==a?null:f(e,t,n,r,null);_o(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,a,r.key):s(t,e,r,a);case A:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(yo(r)||F(r))return f(t,e=e.get(n)||null,r,a,null);_o(t,r)}return null}function v(a,i,l,u){for(var s=null,c=null,f=i,v=i=0,m=null;null!==f&&v<l.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=p(a,f,l[v],u);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(a,f),i=o(g,i,v),null===c?s=g:c.sibling=g,c=g,f=m}if(v===l.length)return n(a,f),s;if(null===f){for(;v<l.length;v++)null!==(f=d(a,l[v],u))&&(i=o(f,i,v),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(a,f);v<l.length;v++)null!==(m=h(f,a,v,l[v],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),i=o(m,i,v),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(a,e)})),s}function m(a,l,u,s){var c=F(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,v=l,m=l=0,g=null,y=u.next();null!==v&&!y.done;m++,y=u.next()){v.index>m?(g=v,v=null):g=v.sibling;var b=p(a,v,y.value,s);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(a,v),l=o(b,l,m),null===f?c=b:f.sibling=b,f=b,v=g}if(y.done)return n(a,v),c;if(null===v){for(;!y.done;m++,y=u.next())null!==(y=d(a,y.value,s))&&(l=o(y,l,m),null===f?c=y:f.sibling=y,f=y);return c}for(v=r(a,v);!y.done;m++,y=u.next())null!==(y=h(v,a,m,y.value,s))&&(e&&null!==y.alternate&&v.delete(null===y.key?m:y.key),l=o(y,l,m),null===f?c=y:f.sibling=y,f=y);return e&&v.forEach((function(e){return t(a,e)})),c}return function(e,r,o,u){var s="object"==typeof o&&null!==o&&o.type===S&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case k:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(o.type===S){n(e,s.sibling),(r=a(s,o.props.children)).return=e,e=r;break e}break;default:if(s.elementType===o.type){n(e,s.sibling),(r=a(s,o.props)).ref=bo(e,s,o),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}o.type===S?((r=Uu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Iu(o.type,o.key,o.props,null,e.mode,u)).ref=bo(e,r,o),u.return=e,e=u)}return l(e);case A:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Wu(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Fu(o,e.mode,u)).return=e,e=r),l(e);if(yo(o))return v(e,r,o,u);if(F(o))return m(e,r,o,u);if(c&&_o(e,o),void 0===o&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,q(e.type)||"Component"))}return n(e,r)}}var ko=wo(!0),Ao=wo(!1),So={},Eo=aa(So),xo=aa(So),Co=aa(So);function Oo(e){if(e===So)throw Error(i(174));return e}function To(e,t){switch(ia(Co,t),ia(xo,e),ia(Eo,So),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}oa(Eo),ia(Eo,t)}function No(){oa(Eo),oa(xo),oa(Co)}function Po(e){Oo(Co.current);var t=Oo(Eo.current),n=pe(t,e.type);t!==n&&(ia(xo,e),ia(Eo,n))}function Lo(e){xo.current===e&&(oa(Eo),oa(xo))}var Ro=aa(0);function jo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Mo=null,zo=null,Do=!1;function Bo(e,t){var n=zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Io(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Uo(e){if(Do){var t=zo;if(t){var n=t;if(!Io(e,t)){if(!(t=Wr(n.nextSibling))||!Io(e,t))return e.flags=-1025&e.flags|2,Do=!1,void(Mo=e);Bo(Mo,n)}Mo=e,zo=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Do=!1,Mo=e}}function Vo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Mo=e}function Fo(e){if(e!==Mo)return!1;if(!Do)return Vo(e),Do=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ir(t,e.memoizedProps))for(t=zo;t;)Bo(e,t),t=Wr(t.nextSibling);if(Vo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zo=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zo=null}}else zo=Mo?Wr(e.stateNode.nextSibling):null;return!0}function Wo(){zo=Mo=null,Do=!1}var $o=[];function Ho(){for(var e=0;e<$o.length;e++)$o[e]._workInProgressVersionPrimary=null;$o.length=0}var Ko=w.ReactCurrentDispatcher,qo=w.ReactCurrentBatchConfig,Qo=0,Go=null,Yo=null,Xo=null,Jo=!1,Zo=!1;function ei(){throw Error(i(321))}function ti(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function ni(e,t,n,r,a,o){if(Qo=o,Go=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ko.current=null===e||null===e.memoizedState?Oi:Ti,e=n(r,a),Zo){o=0;do{if(Zo=!1,!(25>o))throw Error(i(301));o+=1,Xo=Yo=null,t.updateQueue=null,Ko.current=Ni,e=n(r,a)}while(Zo)}if(Ko.current=Ci,t=null!==Yo&&null!==Yo.next,Qo=0,Xo=Yo=Go=null,Jo=!1,t)throw Error(i(300));return e}function ri(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xo?Go.memoizedState=Xo=e:Xo=Xo.next=e,Xo}function ai(){if(null===Yo){var e=Go.alternate;e=null!==e?e.memoizedState:null}else e=Yo.next;var t=null===Xo?Go.memoizedState:Xo.next;if(null!==t)Xo=t,Yo=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Yo=e).memoizedState,baseState:Yo.baseState,baseQueue:Yo.baseQueue,queue:Yo.queue,next:null},null===Xo?Go.memoizedState=Xo=e:Xo=Xo.next=e}return Xo}function oi(e,t){return"function"==typeof t?t(e):t}function ii(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Yo,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=l=o=null,s=a;do{var c=s.lane;if((Qo&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,o=r):u=u.next=f,Go.lanes|=c,jl|=c}s=s.next}while(null!==s&&s!==a);null===u?o=r:u.next=l,or(r,t.memoizedState)||(Li=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function li(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);or(o,t.memoizedState)||(Li=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ui(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Qo&e)===e)&&(t._workInProgressVersionPrimary=r,$o.push(t))),e)return n(t._source);throw $o.push(t),Error(i(350))}function si(e,t,n,r){var a=xl;if(null===a)throw Error(i(349));var o=t._getVersion,l=o(t._source),u=Ko.current,s=u.useState((function(){return ui(a,t,n)})),c=s[1],f=s[0];s=Xo;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var m=Go;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=o(t._source);if(!or(l,e)){e=n(t._source),or(f,e)||(c(e),e=iu(m),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,i=e;0<i;){var u=31-Ft(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=iu(m);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),or(h,n)&&or(v,t)&&or(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:oi,lastRenderedState:f}).dispatch=c=xi.bind(null,Go,e),s.queue=e,s.baseQueue=null,f=ui(a,t,n),s.memoizedState=s.baseState=f),f}function ci(e,t,n){return si(ai(),e,t,n)}function fi(e){var t=ri();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:oi,lastRenderedState:e}).dispatch=xi.bind(null,Go,e),[t.memoizedState,e]}function di(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Go.updateQueue)?(t={lastEffect:null},Go.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pi(e){return e={current:e},ri().memoizedState=e}function hi(){return ai().memoizedState}function vi(e,t,n,r){var a=ri();Go.flags|=e,a.memoizedState=di(1|t,n,void 0,void 0===r?null:r)}function mi(e,t,n,r){var a=ai();r=void 0===r?null:r;var o=void 0;if(null!==Yo){var i=Yo.memoizedState;if(o=i.destroy,null!==r&&ti(r,i.deps))return void di(t,n,o,r)}Go.flags|=e,a.memoizedState=di(1|t,n,o,r)}function gi(e,t){return vi(516,4,e,t)}function yi(e,t){return mi(516,4,e,t)}function bi(e,t){return mi(4,2,e,t)}function _i(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function wi(e,t,n){return n=null!=n?n.concat([e]):null,mi(4,2,_i.bind(null,t,e),n)}function ki(){}function Ai(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Si(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ti(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ei(e,t){var n=Ia();Va(98>n?98:n,(function(){e(!0)})),Va(97<n?97:n,(function(){var n=qo.transition;qo.transition=1;try{e(!1),t()}finally{qo.transition=n}}))}function xi(e,t,n){var r=ou(),a=iu(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Go||null!==i&&i===Go)Zo=Jo=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(o.eagerReducer=i,o.eagerState=u,or(u,l))return}catch(e){}lu(e,a,r)}}var Ci={readContext:to,useCallback:ei,useContext:ei,useEffect:ei,useImperativeHandle:ei,useLayoutEffect:ei,useMemo:ei,useReducer:ei,useRef:ei,useState:ei,useDebugValue:ei,useDeferredValue:ei,useTransition:ei,useMutableSource:ei,useOpaqueIdentifier:ei,unstable_isNewReconciler:!1},Oi={readContext:to,useCallback:function(e,t){return ri().memoizedState=[e,void 0===t?null:t],e},useContext:to,useEffect:gi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,_i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vi(4,2,e,t)},useMemo:function(e,t){var n=ri();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ri();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=xi.bind(null,Go,e),[r.memoizedState,e]},useRef:pi,useState:fi,useDebugValue:ki,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return gi((function(){var t=qo.transition;qo.transition=1;try{r(e)}finally{qo.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return pi(e=Ei.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ri();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},si(r,e,t,n)},useOpaqueIdentifier:function(){if(Do){var e=!1,t=function(e){return{$$typeof:M,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Go.mode)&&(Go.flags|=516,di(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return fi(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},Ti={readContext:to,useCallback:Ai,useContext:to,useEffect:yi,useImperativeHandle:wi,useLayoutEffect:bi,useMemo:Si,useReducer:ii,useRef:hi,useState:function(){return ii(oi)},useDebugValue:ki,useDeferredValue:function(e){var t=ii(oi),n=t[0],r=t[1];return yi((function(){var t=qo.transition;qo.transition=1;try{r(e)}finally{qo.transition=t}}),[e]),n},useTransition:function(){var e=ii(oi)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return ii(oi)[0]},unstable_isNewReconciler:!1},Ni={readContext:to,useCallback:Ai,useContext:to,useEffect:yi,useImperativeHandle:wi,useLayoutEffect:bi,useMemo:Si,useReducer:li,useRef:hi,useState:function(){return li(oi)},useDebugValue:ki,useDeferredValue:function(e){var t=li(oi),n=t[0],r=t[1];return yi((function(){var t=qo.transition;qo.transition=1;try{r(e)}finally{qo.transition=t}}),[e]),n},useTransition:function(){var e=li(oi)[0];return[hi().current,e]},useMutableSource:ci,useOpaqueIdentifier:function(){return li(oi)[0]},unstable_isNewReconciler:!1},Pi=w.ReactCurrentOwner,Li=!1;function Ri(e,t,n,r){t.child=null===e?Ao(t,null,n,r):ko(t,e.child,n,r)}function ji(e,t,n,r,a){n=n.render;var o=t.ref;return eo(t,a),r=ni(e,t,n,r,o,a),null===e||Li?(t.flags|=1,Ri(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Ji(e,t,a))}function Mi(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||Du(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Iu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,zi(e,t,i,r,a,o))}return i=e.child,0==(a&o)&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)?Ji(e,t,o):(t.flags|=1,(e=Bu(i,r)).ref=t.ref,e.return=t,t.child=e)}function zi(e,t,n,r,a,o){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Li=!1,0==(o&a))return t.lanes=e.lanes,Ji(e,t,o);0!=(16384&e.flags)&&(Li=!0)}return Ii(e,t,n,r,o)}function Di(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},hu(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},hu(0,e),null;t.memoizedState={baseLanes:0},hu(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,hu(0,r);return Ri(e,t,a,n),t.child}function Bi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ii(e,t,n,r,a){var o=da(n)?ca:ua.current;return o=fa(t,o),eo(t,a),n=ni(e,t,n,r,o,a),null===e||Li?(t.flags|=1,Ri(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Ji(e,t,a))}function Ui(e,t,n,r,a){if(da(n)){var o=!0;ma(t)}else o=!1;if(eo(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),vo(t,n,r),go(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?to(s):fa(t,s=da(n)?ca:ua.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&mo(t,i,r,s),no=!1;var d=t.memoizedState;i.state=d,uo(t,r,i,a),u=t.memoizedState,l!==r||d!==u||sa.current||no?("function"==typeof c&&(fo(t,n,c,r),u=t.memoizedState),(l=no||ho(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ao(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Ka(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?to(u):fa(t,u=da(n)?ca:ua.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&mo(t,i,r,u),no=!1,d=t.memoizedState,i.state=d,uo(t,r,i,a);var h=t.memoizedState;l!==f||d!==h||sa.current||no?("function"==typeof p&&(fo(t,n,p,r),h=t.memoizedState),(s=no||ho(t,n,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Vi(e,t,n,r,o,a)}function Vi(e,t,n,r,a,o){Bi(e,t);var i=0!=(64&t.flags);if(!r&&!i)return a&&ga(t,n,!1),Ji(e,t,o);r=t.stateNode,Pi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=ko(t,e.child,null,o),t.child=ko(t,null,l,o)):Ri(e,t,l,o),t.memoizedState=r.state,a&&ga(t,n,!0),t.child}function Fi(e){var t=e.stateNode;t.pendingContext?ha(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ha(0,t.context,!1),To(e,t.containerInfo)}var Wi,$i,Hi,Ki={dehydrated:null,retryLane:0};function qi(e,t,n){var r,a=t.pendingProps,o=Ro.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),ia(Ro,1&o),null===e?(void 0!==a.fallback&&Uo(t),e=a.children,o=a.fallback,i?(e=Qi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ki,e):"number"==typeof a.unstable_expectedLoadTime?(e=Qi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ki,t.lanes=33554432,e):((n=Vu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(a=function(e,t,n,r,a){var o=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&o)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Bu(i,l),null!==e?r=Bu(e,r):(r=Uu(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),i=t.child,o=e.child.memoizedState,i.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Ki,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Bu(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Qi(e,t,n,r){var a=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Vu(t,a,0,null),n=Uu(n,a,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Gi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),Za(e.return,t)}function Yi(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a,i.lastEffect=o)}function Xi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ri(e,t,r.children,n),0!=(2&(r=Ro.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gi(e,n);else if(19===e.tag)Gi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ia(Ro,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===jo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Yi(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===jo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Yi(t,!0,n,null,o,t.lastEffect);break;case"together":Yi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),jl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Bu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function Zi(e,t){if(!Do)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function el(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return da(t.type)&&pa(),null;case 3:return No(),oa(sa),oa(ua),Ho(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Fo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Lo(t);var o=Oo(Co.current);if(n=t.type,null!==e&&null!=t.stateNode)$i(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Oo(Eo.current),Fo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[qr]=t,r[Qr]=l,n){case"dialog":Er("cancel",r),Er("close",r);break;case"iframe":case"object":case"embed":Er("load",r);break;case"video":case"audio":for(e=0;e<wr.length;e++)Er(wr[e],r);break;case"source":Er("error",r);break;case"img":case"image":case"link":Er("error",r),Er("load",r);break;case"details":Er("toggle",r);break;case"input":ee(r,l),Er("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Er("invalid",r);break;case"textarea":ue(r,l),Er("invalid",r)}for(var s in Ae(n,l),e=null,l)l.hasOwnProperty(s)&&(o=l[s],"children"===s?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):u.hasOwnProperty(s)&&null!=o&&"onScroll"===s&&Er("scroll",r));switch(n){case"input":Y(r),re(r,l,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Mr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===o.nodeType?o:o.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[qr]=t,e[Qr]=r,Wi(e,t),t.stateNode=e,s=Se(n,r),n){case"dialog":Er("cancel",e),Er("close",e),o=r;break;case"iframe":case"object":case"embed":Er("load",e),o=r;break;case"video":case"audio":for(o=0;o<wr.length;o++)Er(wr[o],e);o=r;break;case"source":Er("error",e),o=r;break;case"img":case"image":case"link":Er("error",e),Er("load",e),o=r;break;case"details":Er("toggle",e),o=r;break;case"input":ee(e,r),o=Z(e,r),Er("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),Er("invalid",e);break;case"textarea":ue(e,r),o=le(e,r),Er("invalid",e);break;default:o=r}Ae(n,o);var c=o;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?we(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Er("scroll",e):null!=f&&_(e,l,f,s))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Mr)}Br(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Hi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Oo(Co.current),Oo(Eo.current),Fo(t)?(r=t.stateNode,n=t.memoizedProps,r[qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[qr]=t,t.stateNode=r)}return null;case 13:return oa(Ro),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Fo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ro.current)?0===Pl&&(Pl=3):(0!==Pl&&3!==Pl||(Pl=4),null===xl||0==(134217727&jl)&&0==(134217727&Ml)||fu(xl,Ol))),(r||n)&&(t.flags|=4),null);case 4:return No(),null===e&&Cr(t.stateNode.containerInfo),null;case 10:return Ja(t),null;case 17:return da(t.type)&&pa(),null;case 19:if(oa(Ro),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)Zi(r,!1);else{if(0!==Pl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=jo(e))){for(t.flags|=64,Zi(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ia(Ro,1&Ro.current|2),t.child}e=e.sibling}null!==r.tail&&Ba()>Il&&(t.flags|=64,l=!0,Zi(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=jo(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Zi(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Do)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ba()-r.renderingStartTime>Il&&1073741824!==n&&(t.flags|=64,l=!0,Zi(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ba(),n.sibling=null,t=Ro.current,ia(Ro,l?1&t|2:1&t),n):null;case 23:case 24:return vu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function tl(e){switch(e.tag){case 1:da(e.type)&&pa();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(No(),oa(sa),oa(ua),Ho(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Lo(e),null;case 13:return oa(Ro),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return oa(Ro),null;case 4:return No(),null;case 10:return Ja(e),null;case 23:case 24:return vu(),null;default:return null}}function nl(e,t){try{var n="",r=t;do{n+=K(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function rl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$i=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Oo(Eo.current);var i,l=null;switch(n){case"input":o=Z(e,o),r=Z(e,r),l=[];break;case"option":o=oe(e,o),r=oe(e,r),l=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),l=[];break;case"textarea":o=le(e,o),r=le(e,r),l=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Mr)}for(f in Ae(n,r),n=null,o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&null!=o[f])if("style"===f){var s=o[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=o?o[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Er("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===M?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Hi=function(e,t,n,r){n!==r&&(t.flags|=4)};var al="function"==typeof WeakMap?WeakMap:Map;function ol(e,t,n){(n=oo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,$l=r),rl(0,t)},n}function il(e,t,n){(n=oo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return rl(0,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this),rl(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ll="function"==typeof WeakSet?WeakSet:Set;function ul(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Lu(e,t)}else t.current=null}function sl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ka(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Fr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function cl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Tu(n,e),Ou(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ka(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&so(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}so(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Br(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=_e("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function dl(e,t){if(ba&&"function"==typeof ba.onCommitFiberUnmount)try{ba.onCommitFiberUnmount(ya,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Tu(t,n);else{r=t;try{a()}catch(e){Lu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ul(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Lu(t,e)}break;case 5:ul(t);break;case 4:yl(e,t)}}function pl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function hl(e){return 5===e.tag||3===e.tag||4===e.tag}function vl(e){e:{for(var t=e.return;null!==t;){if(hl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||hl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?ml(e,n,t):gl(e,n,t)}function ml(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Mr));else if(4!==r&&null!==(e=e.child))for(ml(e,t,n),e=e.sibling;null!==e;)ml(e,t,n),e=e.sibling}function gl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t){for(var n,r,a=t,o=!1;;){if(!o){o=a.return;e:for(;;){if(null===o)throw Error(i(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===a.tag||6===a.tag){e:for(var l=e,u=a,s=u;;)if(dl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=a.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(dl(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function bl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,a),t=Se(e,r),a=0;a<o.length;a+=2){var l=o[a],u=o[a+1];"style"===l?we(n,u):"dangerouslySetInnerHTML"===l?me(n,u):"children"===l?ge(n,u):_(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ie(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Ba(),fl(t.child,!0)),void _l(t);case 19:return void _l(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(i(163))}function _l(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ll),t.forEach((function(t){var r=ju.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function wl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var kl=Math.ceil,Al=w.ReactCurrentDispatcher,Sl=w.ReactCurrentOwner,El=0,xl=null,Cl=null,Ol=0,Tl=0,Nl=aa(0),Pl=0,Ll=null,Rl=0,jl=0,Ml=0,zl=0,Dl=null,Bl=0,Il=1/0;function Ul(){Il=Ba()+500}var Vl,Fl=null,Wl=!1,$l=null,Hl=null,Kl=!1,ql=null,Ql=90,Gl=[],Yl=[],Xl=null,Jl=0,Zl=null,eu=-1,tu=0,nu=0,ru=null,au=!1;function ou(){return 0!=(48&El)?Ba():-1!==eu?eu:eu=Ba()}function iu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ia()?1:2;if(0===tu&&(tu=Rl),0!==Ha.transition){0!==nu&&(nu=null!==Dl?Dl.pendingLanes:0),e=tu;var t=4186112&~nu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ia(),e=Bt(0!=(4&El)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tu)}function lu(e,t,n){if(50<Jl)throw Jl=0,Zl=null,Error(i(185));if(null===(e=uu(e,t)))return null;Vt(e,t,n),e===xl&&(Ml|=t,4===Pl&&fu(e,Ol));var r=Ia();1===t?0!=(8&El)&&0==(48&El)?du(e):(su(e,n),0===El&&(Ul(),Wa())):(0==(4&El)||98!==r&&99!==r||(null===Xl?Xl=new Set([e]):Xl.add(e)),su(e,n)),Dl=e}function uu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function su(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ft(l),s=1<<u,c=o[u];if(-1===c){if(0==(s&r)||0!=(s&a)){c=t,Mt(s);var f=jt;o[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=zt(e,e===xl?Ol:0),t=jt,0===r)null!==n&&(n!==La&&ka(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==La&&ka(n)}15===t?(n=du.bind(null,e),null===ja?(ja=[n],Ma=wa(Ca,$a)):ja.push(n),n=La):n=14===t?Fa(99,du.bind(null,e)):Fa(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),cu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cu(e){if(eu=-1,nu=tu=0,0!=(48&El))throw Error(i(327));var t=e.callbackNode;if(Cu()&&e.callbackNode!==t)return null;var n=zt(e,e===xl?Ol:0);if(0===n)return null;var r=n,a=El;El|=16;var o=yu();for(xl===e&&Ol===r||(Ul(),mu(e,r));;)try{wu();break}catch(t){gu(e,t)}if(Xa(),Al.current=o,El=a,null!==Cl?r=0:(xl=null,Ol=0,r=Pl),0!=(Rl&Ml))mu(e,0);else if(0!==r){if(2===r&&(El|=64,e.hydrate&&(e.hydrate=!1,Fr(e.containerInfo)),0!==(n=Dt(e))&&(r=bu(e,n))),1===r)throw t=Ll,mu(e,0),fu(e,n),su(e,Ba()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Su(e);break;case 3:if(fu(e,n),(62914560&n)===n&&10<(r=Bl+500-Ba())){if(0!==zt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){ou(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Ur(Su.bind(null,e),r);break}Su(e);break;case 4:if(fu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var l=31-Ft(n);o=1<<l,(l=r[l])>a&&(a=l),n&=~o}if(n=a,10<(n=(120>(n=Ba()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*kl(n/1960))-n)){e.timeoutHandle=Ur(Su.bind(null,e),n);break}Su(e);break;case 5:Su(e);break;default:throw Error(i(329))}}return su(e,Ba()),e.callbackNode===t?cu.bind(null,e):null}function fu(e,t){for(t&=~zl,t&=~Ml,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ft(t),r=1<<n;e[n]=-1,t&=~r}}function du(e){if(0!=(48&El))throw Error(i(327));if(Cu(),e===xl&&0!=(e.expiredLanes&Ol)){var t=Ol,n=bu(e,t);0!=(Rl&Ml)&&(n=bu(e,t=zt(e,t)))}else n=bu(e,t=zt(e,0));if(0!==e.tag&&2===n&&(El|=64,e.hydrate&&(e.hydrate=!1,Fr(e.containerInfo)),0!==(t=Dt(e))&&(n=bu(e,t))),1===n)throw n=Ll,mu(e,0),fu(e,t),su(e,Ba()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Su(e),su(e,Ba()),null}function pu(e,t){var n=El;El|=1;try{return e(t)}finally{0===(El=n)&&(Ul(),Wa())}}function hu(e,t){ia(Nl,Tl),Tl|=t,Rl|=t}function vu(){Tl=Nl.current,oa(Nl)}function mu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Cl)for(n=Cl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pa();break;case 3:No(),oa(sa),oa(ua),Ho();break;case 5:Lo(r);break;case 4:No();break;case 13:case 19:oa(Ro);break;case 10:Ja(r);break;case 23:case 24:vu()}n=n.return}xl=e,Cl=Bu(e.current,null),Ol=Tl=Rl=t,Pl=0,Ll=null,zl=Ml=jl=0}function gu(e,t){for(;;){var n=Cl;try{if(Xa(),Ko.current=Ci,Jo){for(var r=Go.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}Jo=!1}if(Qo=0,Xo=Yo=Go=null,Zo=!1,Sl.current=null,null===n||null===n.return){Pl=1,Ll=t,Cl=null;break}e:{var o=e,i=n.return,l=n,u=t;if(t=Ol,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Ro.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var m=d.updateQueue;if(null===m){var g=new Set;g.add(s),d.updateQueue=g}else m.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=oo(-1,1);y.tag=2,io(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new al,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var _=Ru.bind(null,o,s,l);s.then(_,_)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Pl&&(Pl=2),u=nl(u,l),d=i;do{switch(d.tag){case 3:o=u,d.flags|=4096,t&=-t,d.lanes|=t,lo(d,ol(0,o,t));break e;case 1:o=u;var w=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Hl||!Hl.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,lo(d,il(d,o,t));break e}}d=d.return}while(null!==d)}Au(n)}catch(e){t=e,Cl===n&&null!==n&&(Cl=n=n.return);continue}break}}function yu(){var e=Al.current;return Al.current=Ci,null===e?Ci:e}function bu(e,t){var n=El;El|=16;var r=yu();for(xl===e&&Ol===t||mu(e,t);;)try{_u();break}catch(t){gu(e,t)}if(Xa(),El=n,Al.current=r,null!==Cl)throw Error(i(261));return xl=null,Ol=0,Pl}function _u(){for(;null!==Cl;)ku(Cl)}function wu(){for(;null!==Cl&&!Aa();)ku(Cl)}function ku(e){var t=Vl(e.alternate,e,Tl);e.memoizedProps=e.pendingProps,null===t?Au(e):Cl=t,Sl.current=null}function Au(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=el(n,t,Tl)))return void(Cl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Tl)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=tl(t)))return n.flags&=2047,void(Cl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Cl=t);Cl=t=e}while(null!==t);0===Pl&&(Pl=5)}function Su(e){var t=Ia();return Va(99,Eu.bind(null,e,t)),null}function Eu(e,t){do{Cu()}while(null!==ql);if(0!=(48&El))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,o=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<o;){var s=31-Ft(o),c=1<<s;a[s]=0,l[s]=-1,u[s]=-1,o&=~c}if(null!==Xl&&0==(24&r)&&Xl.has(e)&&Xl.delete(e),e===xl&&(Cl=xl=null,Ol=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=El,El|=32,Sl.current=null,zr=qt,dr(l=fr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,o=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,v=0,m=l,g=null;t:for(;;){for(var y;m!==u||0!==o&&3!==m.nodeType||(d=f+o),m!==s||0!==c&&3!==m.nodeType||(p=f+c),3===m.nodeType&&(f+=m.nodeValue.length),null!==(y=m.firstChild);)g=m,m=y;for(;;){if(m===l)break t;if(g===u&&++h===o&&(d=f),g===s&&++v===c&&(p=f),null!==(y=m.nextSibling))break;g=(m=g).parentNode}m=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Dr={focusedElem:l,selectionRange:u},qt=!1,ru=null,au=!1,Fl=r;do{try{xu()}catch(e){if(null===Fl)throw Error(i(330));Lu(Fl,e),Fl=Fl.nextEffect}}while(null!==Fl);ru=null,Fl=r;do{try{for(l=e;null!==Fl;){var b=Fl.flags;if(16&b&&ge(Fl.stateNode,""),128&b){var _=Fl.alternate;if(null!==_){var w=_.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:vl(Fl),Fl.flags&=-3;break;case 6:vl(Fl),Fl.flags&=-3,bl(Fl.alternate,Fl);break;case 1024:Fl.flags&=-1025;break;case 1028:Fl.flags&=-1025,bl(Fl.alternate,Fl);break;case 4:bl(Fl.alternate,Fl);break;case 8:yl(l,u=Fl);var k=u.alternate;pl(u),null!==k&&pl(k)}Fl=Fl.nextEffect}}catch(e){if(null===Fl)throw Error(i(330));Lu(Fl,e),Fl=Fl.nextEffect}}while(null!==Fl);if(w=Dr,_=fr(),b=w.focusedElem,l=w.selectionRange,_!==b&&b&&b.ownerDocument&&cr(b.ownerDocument.documentElement,b)){null!==l&&dr(b)&&(_=l.start,void 0===(w=l.end)&&(w=_),"selectionStart"in b?(b.selectionStart=_,b.selectionEnd=Math.min(w,b.value.length)):(w=(_=b.ownerDocument||document)&&_.defaultView||window).getSelection&&(w=w.getSelection(),u=b.textContent.length,k=Math.min(l.start,u),l=void 0===l.end?k:Math.min(l.end,u),!w.extend&&k>l&&(u=l,l=k,k=u),u=sr(b,k),o=sr(b,l),u&&o&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==o.node||w.focusOffset!==o.offset)&&((_=_.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),k>l?(w.addRange(_),w.extend(o.node,o.offset)):(_.setEnd(o.node,o.offset),w.addRange(_))))),_=[];for(w=b;w=w.parentNode;)1===w.nodeType&&_.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<_.length;b++)(w=_[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!zr,Dr=zr=null,e.current=n,Fl=r;do{try{for(b=e;null!==Fl;){var A=Fl.flags;if(36&A&&cl(b,Fl.alternate,Fl),128&A){_=void 0;var S=Fl.ref;if(null!==S){var E=Fl.stateNode;switch(Fl.tag){case 5:_=E;break;default:_=E}"function"==typeof S?S(_):S.current=_}}Fl=Fl.nextEffect}}catch(e){if(null===Fl)throw Error(i(330));Lu(Fl,e),Fl=Fl.nextEffect}}while(null!==Fl);Fl=null,Ra(),El=a}else e.current=n;if(Kl)Kl=!1,ql=e,Ql=t;else for(Fl=r;null!==Fl;)t=Fl.nextEffect,Fl.nextEffect=null,8&Fl.flags&&((A=Fl).sibling=null,A.stateNode=null),Fl=t;if(0===(r=e.pendingLanes)&&(Hl=null),1===r?e===Zl?Jl++:(Jl=0,Zl=e):Jl=0,n=n.stateNode,ba&&"function"==typeof ba.onCommitFiberRoot)try{ba.onCommitFiberRoot(ya,n,void 0,64==(64&n.current.flags))}catch(e){}if(su(e,Ba()),Wl)throw Wl=!1,e=$l,$l=null,e;return 0!=(8&El)||Wa(),null}function xu(){for(;null!==Fl;){var e=Fl.alternate;au||null===ru||(0!=(8&Fl.flags)?Je(Fl,ru)&&(au=!0):13===Fl.tag&&wl(e,Fl)&&Je(Fl,ru)&&(au=!0));var t=Fl.flags;0!=(256&t)&&sl(e,Fl),0==(512&t)||Kl||(Kl=!0,Fa(97,(function(){return Cu(),null}))),Fl=Fl.nextEffect}}function Cu(){if(90!==Ql){var e=97<Ql?97:Ql;return Ql=90,Va(e,Nu)}return!1}function Ou(e,t){Gl.push(t,e),Kl||(Kl=!0,Fa(97,(function(){return Cu(),null})))}function Tu(e,t){Yl.push(t,e),Kl||(Kl=!0,Fa(97,(function(){return Cu(),null})))}function Nu(){if(null===ql)return!1;var e=ql;if(ql=null,0!=(48&El))throw Error(i(331));var t=El;El|=32;var n=Yl;Yl=[];for(var r=0;r<n.length;r+=2){var a=n[r],o=n[r+1],l=a.destroy;if(a.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===o)throw Error(i(330));Lu(o,e)}}for(n=Gl,Gl=[],r=0;r<n.length;r+=2){a=n[r],o=n[r+1];try{var u=a.create;a.destroy=u()}catch(e){if(null===o)throw Error(i(330));Lu(o,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return El=t,Wa(),!0}function Pu(e,t,n){io(e,t=ol(0,t=nl(n,t),1)),t=ou(),null!==(e=uu(e,1))&&(Vt(e,1,t),su(e,t))}function Lu(e,t){if(3===e.tag)Pu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Pu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){var a=il(n,e=nl(t,e),1);if(io(n,a),a=ou(),null!==(n=uu(n,1)))Vt(n,1,a),su(n,a);else if("function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ru(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ou(),e.pingedLanes|=e.suspendedLanes&n,xl===e&&(Ol&n)===n&&(4===Pl||3===Pl&&(62914560&Ol)===Ol&&500>Ba()-Bl?mu(e,0):zl|=n),su(e,t)}function ju(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ia()?1:2:(0===tu&&(tu=Rl),0===(t=It(62914560&~tu))&&(t=4194304))),n=ou(),null!==(e=uu(e,t))&&(Vt(e,t,n),su(e,n))}function Mu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zu(e,t,n,r){return new Mu(e,t,n,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bu(e,t){var n=e.alternate;return null===n?((n=zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Iu(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)Du(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Uu(n.children,a,o,t);case z:l=8,a|=16;break;case E:l=8,a|=1;break;case x:return(e=zu(12,n,t,8|a)).elementType=x,e.type=x,e.lanes=o,e;case N:return(e=zu(13,n,t,a)).type=N,e.elementType=N,e.lanes=o,e;case P:return(e=zu(19,n,t,a)).elementType=P,e.lanes=o,e;case D:return Vu(n,a,o,t);case B:return(e=zu(24,n,t,a)).elementType=B,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case O:l=9;break e;case T:l=11;break e;case L:l=14;break e;case R:l=16,r=null;break e;case j:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=zu(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Uu(e,t,n,r){return(e=zu(7,e,r,t)).lanes=n,e}function Vu(e,t,n,r){return(e=zu(23,e,r,t)).elementType=D,e.lanes=n,e}function Fu(e,t,n){return(e=zu(6,e,null,t)).lanes=n,e}function Wu(e,t,n){return(t=zu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $u(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function Hu(e,t,n,r){var a=t.current,o=ou(),l=iu(a);e:if(n){t:{if(Ge(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(da(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(da(s)){n=va(n,s,u);break e}}n=u}else n=la;return null===t.context?t.context=n:t.pendingContext=n,(t=oo(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),io(a,t),lu(a,l,o),l}function Ku(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qu(e,t){qu(e,t),(e=e.alternate)&&qu(e,t)}function Gu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $u(e,t,null!=n&&!0===n.hydrate),t=zu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ro(t),e[Gr]=n.current,Cr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Yu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Xu(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Ku(i);l.call(e)}}Hu(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Ku(i);u.call(e)}}!function(e,t){var n=El;El&=-2,El|=8;try{e(t)}finally{0===(El=n)&&(Ul(),Wa())}}((function(){Hu(t,i,e,a)}))}return Ku(i)}Vl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||sa.current)Li=!0;else{if(0==(n&r)){switch(Li=!1,t.tag){case 3:Fi(t),Wo();break;case 5:Po(t);break;case 1:da(t.type)&&ma(t);break;case 4:To(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;ia(qa,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?qi(e,t,n):(ia(Ro,1&Ro.current),null!==(t=Ji(e,t,n))?t.sibling:null);ia(Ro,1&Ro.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Xi(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ia(Ro,Ro.current),r)break;return null;case 23:case 24:return t.lanes=0,Di(e,t,n)}return Ji(e,t,n)}Li=0!=(16384&e.flags)}else Li=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=fa(t,ua.current),eo(t,n),a=ni(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,da(r)){var o=!0;ma(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ro(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&fo(t,r,l,e),a.updater=po,t.stateNode=a,a._reactInternals=t,go(t,r,e,n),t=Vi(null,t,r,!0,o,n)}else t.tag=0,Ri(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(o=a._init)(a._payload),t.type=a,o=t.tag=function(e){if("function"==typeof e)return Du(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===L)return 14}return 2}(a),e=Ka(a,e),o){case 0:t=Ii(null,t,a,e,n);break e;case 1:t=Ui(null,t,a,e,n);break e;case 11:t=ji(null,t,a,e,n);break e;case 14:t=Mi(null,t,a,Ka(a.type,e),r,n);break e}throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Ii(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ui(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 3:if(Fi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,ao(e,t),uo(t,r,null,n),(r=t.memoizedState.element)===a)Wo(),t=Ji(e,t,n);else{if((o=(a=t.stateNode).hydrate)&&(zo=Wr(t.stateNode.containerInfo.firstChild),Mo=t,o=Do=!0),o){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(o=e[a])._workInProgressVersionPrimary=e[a+1],$o.push(o);for(n=Ao(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ri(e,t,r,n),Wo();t=t.child}return t;case 5:return Po(t),null===e&&Uo(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,Ir(r,a)?l=null:null!==o&&Ir(r,o)&&(t.flags|=16),Bi(e,t),Ri(e,t,l,n),t.child;case 6:return null===e&&Uo(t),null;case 13:return qi(e,t,n);case 4:return To(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ko(t,null,r,n):Ri(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,ji(e,t,r,a=t.elementType===r?a:Ka(r,a),n);case 7:return Ri(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ri(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,o=a.value;var u=t.type._context;if(ia(qa,u._currentValue),u._currentValue=o,null!==l)if(u=l.value,0==(o=or(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===a.children&&!sa.current){t=Ji(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=oo(-1,n&-n)).tag=2,io(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),Za(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ri(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,eo(t,n),r=r(a=to(a,o.unstable_observedBits)),t.flags|=1,Ri(e,t,r,n),t.child;case 14:return o=Ka(a=t.type,t.pendingProps),Mi(e,t,a,o=Ka(a.type,o),r,n);case 15:return zi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ka(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,da(r)?(e=!0,ma(t)):e=!1,eo(t,n),vo(t,r,a),go(t,r,a,n),Vi(null,t,r,!0,e,n);case 19:return Xi(e,t,n);case 23:case 24:return Di(e,t,n)}throw Error(i(156,t.tag))},Gu.prototype.render=function(e){Hu(e,this._internalRoot,null,null)},Gu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Hu(null,e,null,(function(){t[Gr]=null}))},Ze=function(e){13===e.tag&&(lu(e,4,ou()),Qu(e,4))},et=function(e){13===e.tag&&(lu(e,67108864,ou()),Qu(e,67108864))},tt=function(e){if(13===e.tag){var t=ou(),n=iu(e);lu(e,n,t),Qu(e,n)}},nt=function(e,t){return t()},xe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ea(r);if(!a)throw Error(i(90));X(r),ne(r,a)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Le=pu,Re=function(e,t,n,r,a){var o=El;El|=4;try{return Va(98,e.bind(null,t,n,r,a))}finally{0===(El=o)&&(Ul(),Wa())}},je=function(){0==(49&El)&&(function(){if(null!==Xl){var e=Xl;Xl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,su(e,Ba())}))}Wa()}(),Cu())},Me=function(e,t){var n=El;El|=2;try{return e(t)}finally{0===(El=n)&&(Ul(),Wa())}};var Ju={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},Zu={bundleType:Ju.bundleType,version:Ju.version,rendererPackageName:Ju.rendererPackageName,rendererConfig:Ju.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Xe(a),e;if(o===r)return Xe(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:Ju.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var es=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!es.isDisabled&&es.supportsFiber)try{ya=es.inject(Zu),ba=es}catch(ve){}}t.render=function(e,t,n){if(!Yu(t))throw Error(i(200));return Xu(null,e,t,!1,n)},t.unstable_batchedUpdates=pu},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{var r=n(418),a=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;a=f("react.element"),o=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var b=y.prototype=new g;b.constructor=y,r(b,m.prototype),b.isPureReactComponent=!0;var _={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function A(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:_.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var E=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case a:case o:u=!0}}if(u)return i=i(u=e),e=""===r?"."+x(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),C(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(E,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+x(l=e[s],s);u+=C(l,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=C(l=l.value,t,n,c=r+x(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,n){if(null==e)return e;var r=[],a=0;return C(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function P(){var e=N.current;if(null===e)throw Error(p(321));return e}var L={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=_.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!k.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=A,t.createFactory=function(e){var t=A.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return P().useCallback(e,t)},t.useContext=function(e,t){return P().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return P().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return P().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return P().useLayoutEffect(e,t)},t.useMemo=function(e,t){return P().useMemo(e,t)},t.useReducer=function(e,t,n){return P().useReducer(e,t,n)},t.useRef=function(e){return P().useRef(e)},t.useState=function(e){return P().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{e.exports=n(408)},53:(e,t)=>{var n,r,a,o;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,w=_.port2;_.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+y;try{m(!0,e)?w.postMessage(null):(v=!1,m=null)}catch(e){throw w.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,w.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},a=function(){p(g),g=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<E(a,t)))break e;e[r]=t,e[n]=a,n=r}}function A(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,u=e[l];if(void 0!==i&&0>E(i,n))void 0!==u&&0>E(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==u&&0>E(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],C=[],O=1,T=null,N=3,P=!1,L=!1,R=!1;function j(e){for(var t=A(C);null!==t;){if(null===t.callback)S(C);else{if(!(t.startTime<=e))break;S(C),t.sortIndex=t.expirationTime,k(x,t)}t=A(C)}}function M(e){if(R=!1,j(e),!L)if(null!==A(x))L=!0,n(z);else{var t=A(C);null!==t&&r(M,t.startTime-e)}}function z(e,n){L=!1,R&&(R=!1,a()),P=!0;var o=N;try{for(j(n),T=A(x);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=T.callback;if("function"==typeof i){T.callback=null,N=T.priorityLevel;var l=i(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?T.callback=l:T===A(x)&&S(x),j(n)}else S(x);T=A(x)}if(null!==T)var u=!0;else{var s=A(C);null!==s&&r(M,s.startTime-n),u=!1}return u}finally{T=null,N=o,P=!1}}var D=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||P||(L=!0,n(z))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return A(x)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,o,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:O++,callback:o,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,k(C,e),null===A(x)&&e===A(C)&&(R?a():R=!0,r(M,i-l))):(e.sortIndex=u,k(x,e),L||P||(L=!0,n(z))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{e.exports=n(53)},379:(e,t,n)=>{var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function i(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],a=0;a<e.length;a++){var l=e[a],u=t.base?l[0]+t.base:l[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var f=i(c),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==f?(o[f].references++,o[f].updater(d)):o.push({identifier:c,updater:v(d,t),references:1}),r.push(c)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var s,c=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function f(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function d(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function v(e,t){var n,r,a;if(t.singleton){var o=h++;n=p||(p=u(t)),r=f.bind(null,n,o,!1),a=f.bind(null,n,o,!0)}else n=u(t),r=d.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=i(n[r]);o[a].references--}for(var u=l(e,t),s=0;s<n.length;s++){var c=i(n[s]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}n=u}}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(294),t=n(935);function r(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("number"==typeof e?"[MobX] minified error nr: "+e+(n.length?" "+n.map(String).join(","):"")+". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts":"[MobX] "+e)}var a={};function o(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:a}var i=Object.assign,l=Object.getOwnPropertyDescriptor,u=Object.defineProperty,s=Object.prototype,c=[];Object.freeze(c);var f={};Object.freeze(f);var d="undefined"!=typeof Proxy,p=Object.toString();function h(){d||r("Proxy not available")}function v(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var m=function(){};function g(e){return"function"==typeof e}function y(e){switch(typeof e){case"string":case"symbol":case"number":return!0}return!1}function b(e){return null!==e&&"object"==typeof e}function _(e){var t;if(!b(e))return!1;var n=Object.getPrototypeOf(e);return null==n||(null==(t=n.constructor)?void 0:t.toString())===p}function w(e){var t=null==e?void 0:e.constructor;return!!t&&("GeneratorFunction"===t.name||"GeneratorFunction"===t.displayName)}function k(e,t,n){u(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function A(e,t,n){u(e,t,{enumerable:!1,writable:!1,configurable:!0,value:n})}function S(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return b(e)&&!0===e[n]}}function E(e){return e instanceof Map}function x(e){return e instanceof Set}var C=void 0!==Object.getOwnPropertySymbols,O="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:C?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function T(e){return null===e?null:"object"==typeof e?""+e:e}function N(e,t){return s.hasOwnProperty.call(e,t)}var P=Object.getOwnPropertyDescriptors||function(e){var t={};return O(e).forEach((function(n){t[n]=l(e,n)})),t};function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function R(e,t,n){return t&&L(e.prototype,t),n&&L(e,n),e}function j(){return(j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function M(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function z(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function B(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return D(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?D(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}var I=Symbol("mobx-stored-annotations");function U(e){return Object.assign((function(t,n){V(t,n,e)}),e)}function V(e,t,n){N(e,I)||k(e,I,j({},e[I])),function(e){return e.annotationType_===G}(n)||(e[I][t]=n)}var F=Symbol("mobx administration"),W=function(){function e(e){void 0===e&&(e="Atom"),this.name_=void 0,this.isPendingUnobservation_=!1,this.isBeingObserved_=!1,this.observers_=new Set,this.diffValue_=0,this.lastAccessedBy_=0,this.lowestObserverState_=Ve.NOT_TRACKING_,this.onBOL=void 0,this.onBUOL=void 0,this.name_=e}var t=e.prototype;return t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.reportObserved=function(){return ct(this)},t.reportChanged=function(){ut(),ft(this),st()},t.toString=function(){return this.name_},e}(),$=S("Atom",W);function H(e,t,n){void 0===t&&(t=m),void 0===n&&(n=m);var r=new W(e);return t!==m&&Nt(Ot,r,t,undefined),n!==m&&Tt(r,n),r}var K={identity:function(e,t){return e===t},structural:function(e,t){return Kn(e,t)},default:function(e,t){return Object.is(e,t)},shallow:function(e,t){return Kn(e,t,1)}};function q(e,t,n){return Ft(e)?e:Array.isArray(e)?Ee.array(e,{name:n}):_(e)?Ee.object(e,void 0,{name:n}):E(e)?Ee.map(e,{name:n}):x(e)?Ee.set(e,{name:n}):"function"!=typeof e||xt(e)||Vt(e)?e:w(e)?It(e):Et(n,e)}function Q(e){return e}var G="override";function Y(e,t){return{annotationType_:e,options_:t,make_:X,extend_:J}}function X(e,t,n,r){var a;if(null==(a=this.options_)?void 0:a.bound)return null===this.extend_(e,t,n,!1)?0:1;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(xt(n.value))return 1;var o=Z(e,this,t,n,!1);return u(r,t,o),2}function J(e,t,n,r){var a=Z(e,this,t,n);return e.defineProperty_(t,a,r)}function Z(e,t,n,r,a){var o,i,l,u,s,c;void 0===a&&(a=ot.safeDescriptors),c=r,t.annotationType_,c.value;var f,d=r.value;return(null==(o=t.options_)?void 0:o.bound)&&(d=d.bind(null!=(f=e.proxy_)?f:e.target_)),{value:Me(null!=(i=null==(l=t.options_)?void 0:l.name)?i:n.toString(),d,null!=(u=null==(s=t.options_)?void 0:s.autoAction)&&u),configurable:!a||e.isPlainObject_,enumerable:!1,writable:!a}}function ee(e,t){return{annotationType_:e,options_:t,make_:te,extend_:ne}}function te(e,t,n,r){var a;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if((null==(a=this.options_)?void 0:a.bound)&&!Vt(e.target_[t])&&null===this.extend_(e,t,n,!1))return 0;if(Vt(n.value))return 1;var o=re(e,this,0,n,!1);return u(r,t,o),2}function ne(e,t,n,r){var a=re(e,this,0,n);return e.defineProperty_(t,a,r)}function re(e,t,n,r,a){var o,i;void 0===a&&(a=ot.safeDescriptors),i=r,t.annotationType_,i.value;var l,u=r.value;return(null==(o=t.options_)?void 0:o.bound)&&(u=u.bind(null!=(l=e.proxy_)?l:e.target_)),{value:It(u),configurable:!a||e.isPlainObject_,enumerable:!1,writable:!a}}function ae(e,t){return{annotationType_:e,options_:t,make_:oe,extend_:ie}}function oe(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function ie(e,t,n,r){return a=n,this.annotationType_,a.get,e.defineComputedProperty_(t,j({},this.options_,{get:n.get,set:n.set}),r);var a}function le(e,t){return{annotationType_:e,options_:t,make_:ue,extend_:se}}function ue(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function se(e,t,n,r){var a,o;return this.annotationType_,e.defineObservableProperty_(t,n.value,null!=(a=null==(o=this.options_)?void 0:o.enhancer)?a:q,r)}var ce=fe();function fe(e){return{annotationType_:"true",options_:e,make_:de,extend_:pe}}function de(e,t,n,r){var a,o,i;if(n.get)return Te.make_(e,t,n,r);if(n.set){var l=Me(t.toString(),n.set);return r===e.target_?null===e.defineProperty_(t,{configurable:!ot.safeDescriptors||e.isPlainObject_,set:l})?0:2:(u(r,t,{configurable:!0,set:l}),2)}if(r!==e.target_&&"function"==typeof n.value)return w(n.value)?It.make_(e,t,n,r):((null==(i=this.options_)?void 0:i.autoBind)?Et.bound:Et).make_(e,t,n,r);var s,c=!1===(null==(a=this.options_)?void 0:a.deep)?Ee.ref:Ee;return"function"==typeof n.value&&(null==(o=this.options_)?void 0:o.autoBind)&&(n.value=n.value.bind(null!=(s=e.proxy_)?s:e.target_)),c.make_(e,t,n,r)}function pe(e,t,n,r){var a,o,i;return n.get?Te.extend_(e,t,n,r):n.set?e.defineProperty_(t,{configurable:!ot.safeDescriptors||e.isPlainObject_,set:Me(t.toString(),n.set)},r):("function"==typeof n.value&&(null==(a=this.options_)?void 0:a.autoBind)&&(n.value=n.value.bind(null!=(i=e.proxy_)?i:e.target_)),(!1===(null==(o=this.options_)?void 0:o.deep)?Ee.ref:Ee).extend_(e,t,n,r))}var he={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function ve(e){return e||he}Object.freeze(he);var me=le("observable"),ge=le("observable.ref",{enhancer:Q}),ye=le("observable.shallow",{enhancer:function(e,t,n){return null==e||Ln(e)||vn(e)||kn(e)||En(e)?e:Array.isArray(e)?Ee.array(e,{name:n,deep:!1}):_(e)?Ee.object(e,void 0,{name:n,deep:!1}):E(e)?Ee.map(e,{name:n,deep:!1}):x(e)?Ee.set(e,{name:n,deep:!1}):void 0}}),be=le("observable.struct",{enhancer:function(e,t){return Kn(e,t)?t:e}}),_e=U(me);function we(e){return!0===e.deep?q:!1===e.deep?Q:(t=e.defaultDecorator)&&null!=(n=null==(r=t.options_)?void 0:r.enhancer)?n:q;var t,n,r}function ke(e,t,n){if(!y(t))return Ft(e)?e:_(e)?Ee.object(e,t,n):Array.isArray(e)?Ee.array(e,t):E(e)?Ee.map(e,t):x(e)?Ee.set(e,t):"object"==typeof e&&null!==e?e:Ee.box(e,t);V(e,t,me)}Object.assign(ke,_e);var Ae,Se,Ee=i(ke,{box:function(e,t){var n=ve(t);return new Ue(e,we(n),n.name,!0,n.equals)},array:function(e,t){var n=ve(t);return(!1===ot.useProxies||!1===n.proxy?Vn:on)(e,we(n),n.name)},map:function(e,t){var n=ve(t);return new wn(e,we(n),n.name)},set:function(e,t){var n=ve(t);return new Sn(e,we(n),n.name)},object:function(e,t,n){return Rt(!1===ot.useProxies||!1===(null==n?void 0:n.proxy)?Tn({},n):function(e,t){var n,r;return h(),null!=(r=(n=(e=Tn(e,t))[F]).proxy_)?r:n.proxy_=new Proxy(e,Kt)}({},n),e,t)},ref:U(ge),shallow:U(ye),deep:_e,struct:U(be)}),xe="computed",Ce=ae(xe),Oe=ae("computed.struct",{equals:K.structural}),Te=function(e,t){if(y(t))return V(e,t,Ce);if(_(e))return U(ae(xe,e));var n=_(t)?t:{};return n.get=e,n.name||(n.name=e.name||""),new We(n)};Object.assign(Te,Ce),Te.struct=U(Oe);var Ne,Pe=0,Le=1,Re=null!=(Ae=null==(Se=l((function(){}),"name"))?void 0:Se.configurable)&&Ae,je={value:"action",configurable:!0,writable:!1,enumerable:!1};function Me(e,t,n,r){function a(){return ze(0,n,t,r||this,arguments)}return void 0===n&&(n=!1),a.isMobxAction=!0,Re&&(je.value=e,Object.defineProperty(a,"name",je)),a}function ze(e,t,n,a,o){var i=function(e,t,n,r){var a=ot.trackingDerivation,o=!t||!a;ut();var i=ot.allowStateChanges;o&&(Xe(),i=De(!0));var l={runAsAction_:o,prevDerivation_:a,prevAllowStateChanges_:i,prevAllowStateReads_:Ze(!0),notifySpy_:!1,startTime_:0,actionId_:Le++,parentActionId_:Pe};return Pe=l.actionId_,l}(0,t);try{return n.apply(a,o)}catch(e){throw i.error_=e,e}finally{!function(e){Pe!==e.actionId_&&r(30),Pe=e.parentActionId_,void 0!==e.error_&&(ot.suppressReactionErrors=!0),Be(e.prevAllowStateChanges_),et(e.prevAllowStateReads_),st(),e.runAsAction_&&Je(e.prevDerivation_),ot.suppressReactionErrors=!1}(i)}}function De(e){var t=ot.allowStateChanges;return ot.allowStateChanges=e,t}function Be(e){ot.allowStateChanges=e}Ne=Symbol.toPrimitive;var Ie,Ue=function(e){function t(t,n,r,a,o){var i;return void 0===r&&(r="ObservableValue"),void 0===a&&(a=!0),void 0===o&&(o=K.default),(i=e.call(this,r)||this).enhancer=void 0,i.name_=void 0,i.equals=void 0,i.hasUnreportedChange_=!1,i.interceptors_=void 0,i.changeListeners_=void 0,i.value_=void 0,i.dehancer=void 0,i.enhancer=n,i.name_=r,i.equals=o,i.value_=n(t,void 0,r),i}M(t,e);var n=t.prototype;return n.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},n.set=function(e){this.value_,(e=this.prepareNewValue_(e))!==ot.UNCHANGED&&this.setNewValue_(e)},n.prepareNewValue_=function(e){if(qt(this)){var t=Gt(this,{object:this,type:nn,newValue:e});if(!t)return ot.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value_,this.name_),this.equals(this.value_,e)?ot.UNCHANGED:e},n.setNewValue_=function(e){var t=this.value_;this.value_=e,this.reportChanged(),Yt(this)&&Jt(this,{type:nn,object:this,newValue:e,oldValue:t})},n.get=function(){return this.reportObserved(),this.dehanceValue(this.value_)},n.intercept_=function(e){return Qt(this,e)},n.observe_=function(e,t){return t&&e({observableKind:"value",debugObjectName:this.name_,object:this,type:nn,newValue:this.value_,oldValue:void 0}),Xt(this,e)},n.raw=function(){return this.value_},n.toJSON=function(){return this.get()},n.toString=function(){return this.name_+"["+this.value_+"]"},n.valueOf=function(){return T(this.get())},n[Ne]=function(){return this.valueOf()},t}(W);Ie=Symbol.toPrimitive;var Ve,Fe,We=function(){function e(e){this.dependenciesState_=Ve.NOT_TRACKING_,this.observing_=[],this.newObserving_=null,this.isBeingObserved_=!1,this.isPendingUnobservation_=!1,this.observers_=new Set,this.diffValue_=0,this.runId_=0,this.lastAccessedBy_=0,this.lowestObserverState_=Ve.UP_TO_DATE_,this.unboundDepsCount_=0,this.value_=new He(null),this.name_=void 0,this.triggeredBy_=void 0,this.isComputing_=!1,this.isRunningSetter_=!1,this.derivation=void 0,this.setter_=void 0,this.isTracing_=Fe.NONE,this.scope_=void 0,this.equals_=void 0,this.requiresReaction_=void 0,this.keepAlive_=void 0,this.onBOL=void 0,this.onBUOL=void 0,e.get||r(31),this.derivation=e.get,this.name_=e.name||"ComputedValue",e.set&&(this.setter_=Me("ComputedValue-setter",e.set)),this.equals_=e.equals||(e.compareStructural||e.struct?K.structural:K.default),this.scope_=e.context,this.requiresReaction_=!!e.requiresReaction,this.keepAlive_=!!e.keepAlive}var t=e.prototype;return t.onBecomeStale_=function(){var e;(e=this).lowestObserverState_===Ve.UP_TO_DATE_&&(e.lowestObserverState_=Ve.POSSIBLY_STALE_,e.observers_.forEach((function(e){e.dependenciesState_===Ve.UP_TO_DATE_&&(e.dependenciesState_=Ve.POSSIBLY_STALE_,e.onBecomeStale_())})))},t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.get=function(){if(this.isComputing_&&r(32,this.name_,this.derivation),0!==ot.inBatch||0!==this.observers_.size||this.keepAlive_){if(ct(this),qe(this)){var e=ot.trackingContext;this.keepAlive_&&!e&&(ot.trackingContext=this),this.trackAndCompute()&&((t=this).lowestObserverState_!==Ve.STALE_&&(t.lowestObserverState_=Ve.STALE_,t.observers_.forEach((function(e){e.dependenciesState_===Ve.POSSIBLY_STALE_?e.dependenciesState_=Ve.STALE_:e.dependenciesState_===Ve.UP_TO_DATE_&&(t.lowestObserverState_=Ve.UP_TO_DATE_)})))),ot.trackingContext=e}}else qe(this)&&(this.warnAboutUntrackedRead_(),ut(),this.value_=this.computeValue_(!1),st());var t,n=this.value_;if(Ke(n))throw n.cause;return n},t.set=function(e){if(this.setter_){this.isRunningSetter_&&r(33,this.name_),this.isRunningSetter_=!0;try{this.setter_.call(this.scope_,e)}finally{this.isRunningSetter_=!1}}else r(34,this.name_)},t.trackAndCompute=function(){var e=this.value_,t=this.dependenciesState_===Ve.NOT_TRACKING_,n=this.computeValue_(!0),r=t||Ke(e)||Ke(n)||!this.equals_(e,n);return r&&(this.value_=n),r},t.computeValue_=function(e){this.isComputing_=!0;var t,n=De(!1);if(e)t=Qe(this,this.derivation,this.scope_);else if(!0===ot.disableErrorBoundaries)t=this.derivation.call(this.scope_);else try{t=this.derivation.call(this.scope_)}catch(e){t=new He(e)}return Be(n),this.isComputing_=!1,t},t.suspend_=function(){this.keepAlive_||(Ge(this),this.value_=void 0)},t.observe_=function(e,t){var n=this,r=!0,a=void 0;return function(e,t){var n,r;void 0===t&&(t=f);var a,o=null!=(n=null==(r=t)?void 0:r.name)?n:"Autorun";if(t.scheduler||t.delay){var i=function(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:Ct}(t),l=!1;a=new dt(o,(function(){l||(l=!0,i((function(){l=!1,a.isDisposed_||a.track(u)})))}),t.onError,t.requiresObservable)}else a=new dt(o,(function(){this.track(u)}),t.onError,t.requiresObservable);function u(){e(a)}return a.schedule_(),a.getDisposer_()}((function(){var o=n.get();if(!r||t){var i=Xe();e({observableKind:"computed",debugObjectName:n.name_,type:nn,object:n,newValue:o,oldValue:a}),Je(i)}r=!1,a=o}))},t.warnAboutUntrackedRead_=function(){},t.toString=function(){return this.name_+"["+this.derivation.toString()+"]"},t.valueOf=function(){return T(this.get())},t[Ie]=function(){return this.valueOf()},e}(),$e=S("ComputedValue",We);!function(e){e[e.NOT_TRACKING_=-1]="NOT_TRACKING_",e[e.UP_TO_DATE_=0]="UP_TO_DATE_",e[e.POSSIBLY_STALE_=1]="POSSIBLY_STALE_",e[e.STALE_=2]="STALE_"}(Ve||(Ve={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Fe||(Fe={}));var He=function(e){this.cause=void 0,this.cause=e};function Ke(e){return e instanceof He}function qe(e){switch(e.dependenciesState_){case Ve.UP_TO_DATE_:return!1;case Ve.NOT_TRACKING_:case Ve.STALE_:return!0;case Ve.POSSIBLY_STALE_:for(var t=Ze(!0),n=Xe(),r=e.observing_,a=r.length,o=0;o<a;o++){var i=r[o];if($e(i)){if(ot.disableErrorBoundaries)i.get();else try{i.get()}catch(e){return Je(n),et(t),!0}if(e.dependenciesState_===Ve.STALE_)return Je(n),et(t),!0}}return tt(e),Je(n),et(t),!1}}function Qe(e,t,n){var r=Ze(!0);tt(e),e.newObserving_=new Array(e.observing_.length+100),e.unboundDepsCount_=0,e.runId_=++ot.runId;var a,o=ot.trackingDerivation;if(ot.trackingDerivation=e,ot.inBatch++,!0===ot.disableErrorBoundaries)a=t.call(n);else try{a=t.call(n)}catch(e){a=new He(e)}return ot.inBatch--,ot.trackingDerivation=o,function(e){for(var t=e.observing_,n=e.observing_=e.newObserving_,r=Ve.UP_TO_DATE_,a=0,o=e.unboundDepsCount_,i=0;i<o;i++){var l=n[i];0===l.diffValue_&&(l.diffValue_=1,a!==i&&(n[a]=l),a++),l.dependenciesState_>r&&(r=l.dependenciesState_)}for(n.length=a,e.newObserving_=null,o=t.length;o--;){var u=t[o];0===u.diffValue_&&it(u,e),u.diffValue_=0}for(;a--;){var s=n[a];1===s.diffValue_&&(s.diffValue_=0,f=e,(c=s).observers_.add(f),c.lowestObserverState_>f.dependenciesState_&&(c.lowestObserverState_=f.dependenciesState_))}var c,f;r!==Ve.UP_TO_DATE_&&(e.dependenciesState_=r,e.onBecomeStale_())}(e),et(r),a}function Ge(e){var t=e.observing_;e.observing_=[];for(var n=t.length;n--;)it(t[n],e);e.dependenciesState_=Ve.NOT_TRACKING_}function Ye(e){var t=Xe();try{return e()}finally{Je(t)}}function Xe(){var e=ot.trackingDerivation;return ot.trackingDerivation=null,e}function Je(e){ot.trackingDerivation=e}function Ze(e){var t=ot.allowStateReads;return ot.allowStateReads=e,t}function et(e){ot.allowStateReads=e}function tt(e){if(e.dependenciesState_!==Ve.UP_TO_DATE_){e.dependenciesState_=Ve.UP_TO_DATE_;for(var t=e.observing_,n=t.length;n--;)t[n].lowestObserverState_=Ve.UP_TO_DATE_}}var nt=function(){this.version=6,this.UNCHANGED={},this.trackingDerivation=null,this.trackingContext=null,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!1,this.allowStateReads=!0,this.enforceActions=!0,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1,this.useProxies=!0,this.verifyProxies=!1,this.safeDescriptors=!0},rt=!0,at=!1,ot=function(){var e=o();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(rt=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new nt).version&&(rt=!1),rt?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new nt):(setTimeout((function(){at||r(35)}),1),new nt)}();function it(e,t){e.observers_.delete(t),0===e.observers_.size&&lt(e)}function lt(e){!1===e.isPendingUnobservation_&&(e.isPendingUnobservation_=!0,ot.pendingUnobservations.push(e))}function ut(){ot.inBatch++}function st(){if(0==--ot.inBatch){ht();for(var e=ot.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation_=!1,0===n.observers_.size&&(n.isBeingObserved_&&(n.isBeingObserved_=!1,n.onBUO()),n instanceof We&&n.suspend_())}ot.pendingUnobservations=[]}}function ct(e){var t=ot.trackingDerivation;return null!==t?(t.runId_!==e.lastAccessedBy_&&(e.lastAccessedBy_=t.runId_,t.newObserving_[t.unboundDepsCount_++]=e,!e.isBeingObserved_&&ot.trackingContext&&(e.isBeingObserved_=!0,e.onBO())),!0):(0===e.observers_.size&&ot.inBatch>0&&lt(e),!1)}function ft(e){e.lowestObserverState_!==Ve.STALE_&&(e.lowestObserverState_=Ve.STALE_,e.observers_.forEach((function(e){e.dependenciesState_===Ve.UP_TO_DATE_&&e.onBecomeStale_(),e.dependenciesState_=Ve.STALE_})))}var dt=function(){function e(e,t,n,r){void 0===e&&(e="Reaction"),void 0===r&&(r=!1),this.name_=void 0,this.onInvalidate_=void 0,this.errorHandler_=void 0,this.requiresObservable_=void 0,this.observing_=[],this.newObserving_=[],this.dependenciesState_=Ve.NOT_TRACKING_,this.diffValue_=0,this.runId_=0,this.unboundDepsCount_=0,this.isDisposed_=!1,this.isScheduled_=!1,this.isTrackPending_=!1,this.isRunning_=!1,this.isTracing_=Fe.NONE,this.name_=e,this.onInvalidate_=t,this.errorHandler_=n,this.requiresObservable_=r}var t=e.prototype;return t.onBecomeStale_=function(){this.schedule_()},t.schedule_=function(){this.isScheduled_||(this.isScheduled_=!0,ot.pendingReactions.push(this),ht())},t.isScheduled=function(){return this.isScheduled_},t.runReaction_=function(){if(!this.isDisposed_){ut(),this.isScheduled_=!1;var e=ot.trackingContext;if(ot.trackingContext=this,qe(this)){this.isTrackPending_=!0;try{this.onInvalidate_()}catch(e){this.reportExceptionInDerivation_(e)}}ot.trackingContext=e,st()}},t.track=function(e){if(!this.isDisposed_){ut(),this.isRunning_=!0;var t=ot.trackingContext;ot.trackingContext=this;var n=Qe(this,e,void 0);ot.trackingContext=t,this.isRunning_=!1,this.isTrackPending_=!1,this.isDisposed_&&Ge(this),Ke(n)&&this.reportExceptionInDerivation_(n.cause),st()}},t.reportExceptionInDerivation_=function(e){var t=this;if(this.errorHandler_)this.errorHandler_(e,this);else{if(ot.disableErrorBoundaries)throw e;var n="[mobx] uncaught error in '"+this+"'";ot.suppressReactionErrors||console.error(n,e),ot.globalReactionErrorHandlers.forEach((function(n){return n(e,t)}))}},t.dispose=function(){this.isDisposed_||(this.isDisposed_=!0,this.isRunning_||(ut(),Ge(this),st()))},t.getDisposer_=function(){var e=this.dispose.bind(this);return e[F]=this,e},t.toString=function(){return"Reaction["+this.name_+"]"},t.trace=function(e){void 0===e&&(e=!1),function(){r("trace() is not available in production builds");for(var e=!1,t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];"boolean"==typeof n[n.length-1]&&(e=n.pop());var o=Wt(n);if(!o)return r("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");o.isTracing_===Fe.NONE&&console.log("[mobx.trace] '"+o.name_+"' tracing enabled"),o.isTracing_=e?Fe.BREAK:Fe.LOG}(this,e)},e}(),pt=function(e){return e()};function ht(){ot.inBatch>0||ot.isRunningReactions||pt(vt)}function vt(){ot.isRunningReactions=!0;for(var e=ot.pendingReactions,t=0;e.length>0;){100==++t&&(console.error("[mobx] cycle in reaction: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,a=n.length;r<a;r++)n[r].runReaction_()}ot.isRunningReactions=!1}var mt=S("Reaction",dt),gt="action",yt="autoAction",bt=Y(gt),_t=Y("action.bound",{bound:!0}),wt=Y(yt,{autoAction:!0}),kt=Y("autoAction.bound",{autoAction:!0,bound:!0});function At(e){return function(t,n){return g(t)?Me(t.name||"<unnamed action>",t,e):g(n)?Me(t,n,e):y(n)?V(t,n,e?wt:bt):y(t)?U(Y(e?yt:gt,{name:t,autoAction:e})):void 0}}var St=At(!1);Object.assign(St,bt);var Et=At(!0);function xt(e){return g(e)&&!0===e.isMobxAction}Object.assign(Et,wt),St.bound=U(_t),Et.bound=U(kt);var Ct=function(e){return e()};var Ot="onBO";function Tt(e,t,n){return Nt("onBUO",e,t,n)}function Nt(e,t,n,r){var a="function"==typeof r?Fn(t,n):Fn(t),o=g(r)?r:n,i=e+"L";return a[i]?a[i].add(o):a[i]=new Set([o]),function(){var e=a[i];e&&(e.delete(o),0===e.size&&delete a[i])}}var Pt="always";function Lt(e){!0===e.isolateGlobalState&&function(){if((ot.pendingReactions.length||ot.inBatch||ot.isRunningReactions)&&r(36),at=!0,rt){var e=o();0==--e.__mobxInstanceCount&&(e.__mobxGlobals=void 0),ot=new nt}}();var t,n,a=e.useProxies,i=e.enforceActions;if(void 0!==a&&(ot.useProxies=a===Pt||"never"!==a&&"undefined"!=typeof Proxy),"ifavailable"===a&&(ot.verifyProxies=!0),void 0!==i){var l=i===Pt?Pt:"observed"===i;ot.enforceActions=l,ot.allowStateChanges=!0!==l&&l!==Pt}["computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","disableErrorBoundaries","safeDescriptors"].forEach((function(t){t in e&&(ot[t]=!!e[t])})),ot.allowStateReads=!ot.observableRequiresReaction,e.reactionScheduler&&(t=e.reactionScheduler,n=pt,pt=function(e){return t((function(){return n(e)}))})}function Rt(e,t,n,r){var a=P(t),o=Tn(e,r)[F];ut();try{O(a).forEach((function(e){o.extend_(e,a[e],!n||!(e in n)||n[e])}))}finally{st()}return e}function jt(e){var t,n={name:e.name_};return e.observing_&&e.observing_.length>0&&(n.dependencies=(t=e.observing_,Array.from(new Set(t))).map(jt)),n}var Mt=0;function zt(){this.message="FLOW_CANCELLED"}zt.prototype=Object.create(Error.prototype);var Dt=ee("flow"),Bt=ee("flow.bound",{bound:!0}),It=Object.assign((function(e,t){if(y(t))return V(e,t,Dt);var n=e,r=n.name||"<unnamed flow>",a=function(){var e,t=this,a=arguments,o=++Mt,i=St(r+" - runid: "+o+" - init",n).apply(t,a),l=void 0,u=new Promise((function(t,n){var a=0;function u(e){var t;l=void 0;try{t=St(r+" - runid: "+o+" - yield "+a++,i.next).call(i,e)}catch(e){return n(e)}c(t)}function s(e){var t;l=void 0;try{t=St(r+" - runid: "+o+" - yield "+a++,i.throw).call(i,e)}catch(e){return n(e)}c(t)}function c(e){if(!g(null==e?void 0:e.then))return e.done?t(e.value):(l=Promise.resolve(e.value)).then(u,s);e.then(c,n)}e=n,u(void 0)}));return u.cancel=St(r+" - runid: "+o+" - cancel",(function(){try{l&&Ut(l);var t=i.return(void 0),n=Promise.resolve(t.value);n.then(m,m),Ut(n),e(new zt)}catch(t){e(t)}})),u};return a.isMobXFlow=!0,a}),Dt);function Ut(e){g(e.cancel)&&e.cancel()}function Vt(e){return!0===(null==e?void 0:e.isMobXFlow)}function Ft(e){return function(e,t){return!!e&&(void 0!==t?!!Ln(e)&&e[F].values_.has(t):Ln(e)||!!e[F]||$(e)||mt(e)||$e(e))}(e)}function Wt(e){switch(e.length){case 0:return ot.trackingDerivation;case 1:return Fn(e[0]);case 2:return Fn(e[0],e[1])}}function $t(e,t){void 0===t&&(t=void 0),ut();try{return e.apply(t)}finally{st()}}function Ht(e){return e[F]}It.bound=U(Bt);var Kt={has:function(e,t){return Ht(e).has_(t)},get:function(e,t){return Ht(e).get_(t)},set:function(e,t,n){var r;return!!y(t)&&(null==(r=Ht(e).set_(t,n,!0))||r)},deleteProperty:function(e,t){var n;return!!y(t)&&(null==(n=Ht(e).delete_(t,!0))||n)},defineProperty:function(e,t,n){var r;return null==(r=Ht(e).defineProperty_(t,n))||r},ownKeys:function(e){return Ht(e).ownKeys_()},preventExtensions:function(e){r(13)}};function qt(e){return void 0!==e.interceptors_&&e.interceptors_.length>0}function Qt(e,t){var n=e.interceptors_||(e.interceptors_=[]);return n.push(t),v((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function Gt(e,t){var n=Xe();try{for(var a=[].concat(e.interceptors_||[]),o=0,i=a.length;o<i&&((t=a[o](t))&&!t.type&&r(14),t);o++);return t}finally{Je(n)}}function Yt(e){return void 0!==e.changeListeners_&&e.changeListeners_.length>0}function Xt(e,t){var n=e.changeListeners_||(e.changeListeners_=[]);return n.push(t),v((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function Jt(e,t){var n=Xe(),r=e.changeListeners_;if(r){for(var a=0,o=(r=r.slice()).length;a<o;a++)r[a](t);Je(n)}}var Zt=Symbol("mobx-keys");function en(e,t,n){if(_(e))return Rt(e,e,t,n);var r=Tn(e,n)[F];if(!e[Zt]){var a=Object.getPrototypeOf(e),o=new Set([].concat(O(e),O(a)));o.delete("constructor"),o.delete(F),k(a,Zt,o)}ut();try{e[Zt].forEach((function(e){return r.make_(e,!t||!(e in t)||t[e])}))}finally{st()}return e}var tn="splice",nn="update",rn={get:function(e,t){var n=e[F];return t===F?n:"length"===t?n.getArrayLength_():"string"!=typeof t||isNaN(t)?N(ln,t)?ln[t]:e[t]:n.get_(parseInt(t))},set:function(e,t,n){var r=e[F];return"length"===t&&r.setArrayLength_(n),"symbol"==typeof t||isNaN(t)?e[t]=n:r.set_(parseInt(t),n),!0},preventExtensions:function(){r(15)}},an=function(){function e(e,t,n,r){void 0===e&&(e="ObservableArray"),this.owned_=void 0,this.legacyMode_=void 0,this.atom_=void 0,this.values_=[],this.interceptors_=void 0,this.changeListeners_=void 0,this.enhancer_=void 0,this.dehancer=void 0,this.proxy_=void 0,this.lastKnownLength_=0,this.owned_=n,this.legacyMode_=r,this.atom_=new W(e),this.enhancer_=function(e,n){return t(e,n,"ObservableArray[..]")}}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.dehanceValues_=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},t.intercept_=function(e){return Qt(this,e)},t.observe_=function(e,t){return void 0===t&&(t=!1),t&&e({observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:"splice",index:0,added:this.values_.slice(),addedCount:this.values_.length,removed:[],removedCount:0}),Xt(this,e)},t.getArrayLength_=function(){return this.atom_.reportObserved(),this.values_.length},t.setArrayLength_=function(e){("number"!=typeof e||e<0)&&r("Out of range: "+e);var t=this.values_.length;if(e!==t)if(e>t){for(var n=new Array(e-t),a=0;a<e-t;a++)n[a]=void 0;this.spliceWithArray_(t,0,n)}else this.spliceWithArray_(e,t-e)},t.updateArrayLength_=function(e,t){e!==this.lastKnownLength_&&r(16),this.lastKnownLength_+=t,this.legacyMode_&&t>0&&Un(e+t+1)},t.spliceWithArray_=function(e,t,n){var r=this;this.atom_;var a=this.values_.length;if(void 0===e?e=0:e>a?e=a:e<0&&(e=Math.max(0,a+e)),t=1===arguments.length?a-e:null==t?0:Math.max(0,Math.min(t,a-e)),void 0===n&&(n=c),qt(this)){var o=Gt(this,{object:this.proxy_,type:tn,index:e,removedCount:t,added:n});if(!o)return c;t=o.removedCount,n=o.added}if(n=0===n.length?n:n.map((function(e){return r.enhancer_(e,void 0)})),this.legacyMode_){var i=n.length-t;this.updateArrayLength_(a,i)}var l=this.spliceItemsIntoValues_(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice_(e,n,l),this.dehanceValues_(l)},t.spliceItemsIntoValues_=function(e,t,n){var r;if(n.length<1e4)return(r=this.values_).splice.apply(r,[e,t].concat(n));var a=this.values_.slice(e,e+t),o=this.values_.slice(e+t);this.values_.length=e+n.length-t;for(var i=0;i<n.length;i++)this.values_[e+i]=n[i];for(var l=0;l<o.length;l++)this.values_[e+n.length+l]=o[l];return a},t.notifyArrayChildUpdate_=function(e,t,n){var r=!this.owned_&&!1,a=Yt(this),o=a||r?{observableKind:"array",object:this.proxy_,type:nn,debugObjectName:this.atom_.name_,index:e,newValue:t,oldValue:n}:null;this.atom_.reportChanged(),a&&Jt(this,o)},t.notifyArraySplice_=function(e,t,n){var r=!this.owned_&&!1,a=Yt(this),o=a||r?{observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:tn,index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;this.atom_.reportChanged(),a&&Jt(this,o)},t.get_=function(e){if(e<this.values_.length)return this.atom_.reportObserved(),this.dehanceValue_(this.values_[e]);console.warn("[mobx.array] Attempt to read an array index ("+e+") that is out of bounds ("+this.values_.length+"). Please check length first. Out of bound indices will not be tracked by MobX")},t.set_=function(e,t){var n=this.values_;if(e<n.length){this.atom_;var a=n[e];if(qt(this)){var o=Gt(this,{type:nn,object:this.proxy_,index:e,newValue:t});if(!o)return;t=o.newValue}(t=this.enhancer_(t,a))!==a&&(n[e]=t,this.notifyArrayChildUpdate_(e,t,a))}else e===n.length?this.spliceWithArray_(e,0,[t]):r(17,e,n.length)},e}();function on(e,t,n,r){void 0===n&&(n="ObservableArray"),void 0===r&&(r=!1),h();var a=new an(n,t,r,!1);A(a.values_,F,a);var o=new Proxy(a.values_,rn);if(a.proxy_=o,e&&e.length){var i=De(!0);a.spliceWithArray_(0,0,e),Be(i)}return o}var ln={clear:function(){return this.splice(0)},replace:function(e){var t=this[F];return t.spliceWithArray_(0,t.values_.length,e)},toJSON:function(){return this.slice()},splice:function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),a=2;a<n;a++)r[a-2]=arguments[a];var o=this[F];switch(arguments.length){case 0:return[];case 1:return o.spliceWithArray_(e);case 2:return o.spliceWithArray_(e,t)}return o.spliceWithArray_(e,t,r)},spliceWithArray:function(e,t,n){return this[F].spliceWithArray_(e,t,n)},push:function(){for(var e=this[F],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(e.values_.length,0,n),e.values_.length},pop:function(){return this.splice(Math.max(this[F].values_.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=this[F],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(0,0,n),e.values_.length},reverse:function(){return ot.trackingDerivation&&r(37,"reverse"),this.replace(this.slice().reverse()),this},sort:function(){ot.trackingDerivation&&r(37,"sort");var e=this.slice();return e.sort.apply(e,arguments),this.replace(e),this},remove:function(e){var t=this[F],n=t.dehanceValues_(t.values_).indexOf(e);return n>-1&&(this.splice(n,1),!0)}};function un(e,t){"function"==typeof Array.prototype[e]&&(ln[e]=t(e))}function sn(e){return function(){var t=this[F];t.atom_.reportObserved();var n=t.dehanceValues_(t.values_);return n[e].apply(n,arguments)}}function cn(e){return function(t,n){var r=this,a=this[F];return a.atom_.reportObserved(),a.dehanceValues_(a.values_)[e]((function(e,a){return t.call(n,e,a,r)}))}}function fn(e){return function(){var t=this,n=this[F];n.atom_.reportObserved();var r=n.dehanceValues_(n.values_),a=arguments[0];return arguments[0]=function(e,n,r){return a(e,n,r,t)},r[e].apply(r,arguments)}}un("concat",sn),un("flat",sn),un("includes",sn),un("indexOf",sn),un("join",sn),un("lastIndexOf",sn),un("slice",sn),un("toString",sn),un("toLocaleString",sn),un("every",cn),un("filter",cn),un("find",cn),un("findIndex",cn),un("flatMap",cn),un("forEach",cn),un("map",cn),un("some",cn),un("reduce",fn),un("reduceRight",fn);var dn,pn,hn=S("ObservableArrayAdministration",an);function vn(e){return b(e)&&hn(e[F])}var mn={},gn="add",yn="delete";dn=Symbol.iterator,pn=Symbol.toStringTag;var bn,_n,wn=function(){function e(e,t,n){void 0===t&&(t=q),void 0===n&&(n="ObservableMap"),this.enhancer_=void 0,this.name_=void 0,this[F]=mn,this.data_=void 0,this.hasMap_=void 0,this.keysAtom_=void 0,this.interceptors_=void 0,this.changeListeners_=void 0,this.dehancer=void 0,this.enhancer_=t,this.name_=n,g(Map)||r(18),this.keysAtom_=H("ObservableMap.keys()"),this.data_=new Map,this.hasMap_=new Map,this.merge(e)}var t=e.prototype;return t.has_=function(e){return this.data_.has(e)},t.has=function(e){var t=this;if(!ot.trackingDerivation)return this.has_(e);var n=this.hasMap_.get(e);if(!n){var r=n=new Ue(this.has_(e),Q,"ObservableMap.key?",!1);this.hasMap_.set(e,r),Tt(r,(function(){return t.hasMap_.delete(e)}))}return n.get()},t.set=function(e,t){var n=this.has_(e);if(qt(this)){var r=Gt(this,{type:n?nn:gn,object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this.updateValue_(e,t):this.addValue_(e,t),this},t.delete=function(e){var t=this;if(this.keysAtom_,qt(this)&&!Gt(this,{type:yn,object:this,name:e}))return!1;if(this.has_(e)){var n=Yt(this),r=n?{observableKind:"map",debugObjectName:this.name_,type:yn,object:this,oldValue:this.data_.get(e).value_,name:e}:null;return $t((function(){t.keysAtom_.reportChanged(),t.updateHasMapEntry_(e,!1),t.data_.get(e).setNewValue_(void 0),t.data_.delete(e)})),n&&Jt(this,r),!0}return!1},t.updateHasMapEntry_=function(e,t){var n=this.hasMap_.get(e);n&&n.setNewValue_(t)},t.updateValue_=function(e,t){var n=this.data_.get(e);if((t=n.prepareNewValue_(t))!==ot.UNCHANGED){var r=Yt(this),a=r?{observableKind:"map",debugObjectName:this.name_,type:nn,object:this,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),r&&Jt(this,a)}},t.addValue_=function(e,t){var n=this;this.keysAtom_,$t((function(){var r=new Ue(t,n.enhancer_,"ObservableMap.key",!1);n.data_.set(e,r),t=r.value_,n.updateHasMapEntry_(e,!0),n.keysAtom_.reportChanged()}));var r=Yt(this),a=r?{observableKind:"map",debugObjectName:this.name_,type:gn,object:this,name:e,newValue:t}:null;r&&Jt(this,a)},t.get=function(e){return this.has(e)?this.dehanceValue_(this.data_.get(e).get()):this.dehanceValue_(void 0)},t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.keys=function(){return this.keysAtom_.reportObserved(),this.data_.keys()},t.values=function(){var e=this,t=this.keys();return Gn({next:function(){var n=t.next(),r=n.done,a=n.value;return{done:r,value:r?void 0:e.get(a)}}})},t.entries=function(){var e=this,t=this.keys();return Gn({next:function(){var n=t.next(),r=n.done,a=n.value;return{done:r,value:r?void 0:[a,e.get(a)]}}})},t[dn]=function(){return this.entries()},t.forEach=function(e,t){for(var n,r=B(this);!(n=r()).done;){var a=n.value,o=a[0],i=a[1];e.call(t,i,o,this)}},t.merge=function(e){var t=this;return kn(e)&&(e=new Map(e)),$t((function(){_(e)?function(e){var t=Object.keys(e);if(!C)return t;var n=Object.getOwnPropertySymbols(e);return n.length?[].concat(t,n.filter((function(t){return s.propertyIsEnumerable.call(e,t)}))):t}(e).forEach((function(n){return t.set(n,e[n])})):Array.isArray(e)?e.forEach((function(e){var n=e[0],r=e[1];return t.set(n,r)})):E(e)?(e.constructor!==Map&&r(19,e),e.forEach((function(e,n){return t.set(n,e)}))):null!=e&&r(20,e)})),this},t.clear=function(){var e=this;$t((function(){Ye((function(){for(var t,n=B(e.keys());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.replace=function(e){var t=this;return $t((function(){for(var n,a=function(e){if(E(e)||kn(e))return e;if(Array.isArray(e))return new Map(e);if(_(e)){var t=new Map;for(var n in e)t.set(n,e[n]);return t}return r(21,e)}(e),o=new Map,i=!1,l=B(t.data_.keys());!(n=l()).done;){var u=n.value;if(!a.has(u))if(t.delete(u))i=!0;else{var s=t.data_.get(u);o.set(u,s)}}for(var c,f=B(a.entries());!(c=f()).done;){var d=c.value,p=d[0],h=d[1],v=t.data_.has(p);if(t.set(p,h),t.data_.has(p)){var m=t.data_.get(p);o.set(p,m),v||(i=!0)}}if(!i)if(t.data_.size!==o.size)t.keysAtom_.reportChanged();else for(var g=t.data_.keys(),y=o.keys(),b=g.next(),w=y.next();!b.done;){if(b.value!==w.value){t.keysAtom_.reportChanged();break}b=g.next(),w=y.next()}t.data_=o})),this},t.toString=function(){return"[object ObservableMap]"},t.toJSON=function(){return Array.from(this)},t.observe_=function(e,t){return Xt(this,e)},t.intercept_=function(e){return Qt(this,e)},R(e,[{key:"size",get:function(){return this.keysAtom_.reportObserved(),this.data_.size}},{key:pn,get:function(){return"Map"}}]),e}(),kn=S("ObservableMap",wn),An={};bn=Symbol.iterator,_n=Symbol.toStringTag;var Sn=function(){function e(e,t,n){void 0===t&&(t=q),void 0===n&&(n="ObservableSet"),this.name_=void 0,this[F]=An,this.data_=new Set,this.atom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.dehancer=void 0,this.enhancer_=void 0,this.name_=n,g(Set)||r(22),this.atom_=H(this.name_),this.enhancer_=function(e,r){return t(e,r,n)},e&&this.replace(e)}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.clear=function(){var e=this;$t((function(){Ye((function(){for(var t,n=B(e.data_.values());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.forEach=function(e,t){for(var n,r=B(this);!(n=r()).done;){var a=n.value;e.call(t,a,a,this)}},t.add=function(e){var t=this;if(this.atom_,qt(this)&&!Gt(this,{type:gn,object:this,newValue:e}))return this;if(!this.has(e)){$t((function(){t.data_.add(t.enhancer_(e,void 0)),t.atom_.reportChanged()}));var n=Yt(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:gn,object:this,newValue:e}:null;n&&Jt(this,r)}return this},t.delete=function(e){var t=this;if(qt(this)&&!Gt(this,{type:yn,object:this,oldValue:e}))return!1;if(this.has(e)){var n=Yt(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:yn,object:this,oldValue:e}:null;return $t((function(){t.atom_.reportChanged(),t.data_.delete(e)})),n&&Jt(this,r),!0}return!1},t.has=function(e){return this.atom_.reportObserved(),this.data_.has(this.dehanceValue_(e))},t.entries=function(){var e=0,t=Array.from(this.keys()),n=Array.from(this.values());return Gn({next:function(){var r=e;return e+=1,r<n.length?{value:[t[r],n[r]],done:!1}:{done:!0}}})},t.keys=function(){return this.values()},t.values=function(){this.atom_.reportObserved();var e=this,t=0,n=Array.from(this.data_.values());return Gn({next:function(){return t<n.length?{value:e.dehanceValue_(n[t++]),done:!1}:{done:!0}}})},t.replace=function(e){var t=this;return En(e)&&(e=new Set(e)),$t((function(){Array.isArray(e)||x(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&r("Cannot initialize set from "+e)})),this},t.observe_=function(e,t){return Xt(this,e)},t.intercept_=function(e){return Qt(this,e)},t.toJSON=function(){return Array.from(this)},t.toString=function(){return"[object ObservableSet]"},t[bn]=function(){return this.values()},R(e,[{key:"size",get:function(){return this.atom_.reportObserved(),this.data_.size}},{key:_n,get:function(){return"Set"}}]),e}(),En=S("ObservableSet",Sn),xn=Object.create(null),Cn="remove",On=function(){function e(e,t,n,r){void 0===t&&(t=new Map),void 0===r&&(r=ce),this.target_=void 0,this.values_=void 0,this.name_=void 0,this.defaultAnnotation_=void 0,this.keysAtom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.proxy_=void 0,this.isPlainObject_=void 0,this.appliedAnnotations_=void 0,this.pendingKeys_=void 0,this.target_=e,this.values_=t,this.name_=n,this.defaultAnnotation_=r,this.keysAtom_=new W("ObservableObject.keys"),this.isPlainObject_=_(this.target_)}var t=e.prototype;return t.getObservablePropValue_=function(e){return this.values_.get(e).get()},t.setObservablePropValue_=function(e,t){var n=this.values_.get(e);if(n instanceof We)return n.set(t),!0;if(qt(this)){var r=Gt(this,{type:nn,object:this.proxy_||this.target_,name:e,newValue:t});if(!r)return null;t=r.newValue}if((t=n.prepareNewValue_(t))!==ot.UNCHANGED){var a=Yt(this),o=a?{type:nn,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),a&&Jt(this,o)}return!0},t.get_=function(e){return ot.trackingDerivation&&!N(this.target_,e)&&this.has_(e),this.target_[e]},t.set_=function(e,t,n){return void 0===n&&(n=!1),N(this.target_,e)?this.values_.has(e)?this.setObservablePropValue_(e,t):n?Reflect.set(this.target_,e,t):(this.target_[e]=t,!0):this.extend_(e,{value:t,enumerable:!0,writable:!0,configurable:!0},this.defaultAnnotation_,n)},t.has_=function(e){if(!ot.trackingDerivation)return e in this.target_;this.pendingKeys_||(this.pendingKeys_=new Map);var t=this.pendingKeys_.get(e);return t||(t=new Ue(e in this.target_,Q,"ObservableObject.key?",!1),this.pendingKeys_.set(e,t)),t.get()},t.make_=function(e,t){if(!0===t&&(t=this.defaultAnnotation_),!1!==t){if(!(e in this.target_)){var n;if(null==(n=this.target_[I])?void 0:n[e])return;r(1,t.annotationType_,this.name_+"."+e.toString())}for(var a=this.target_;a&&a!==s;){var o=l(a,e);if(o){var i=t.make_(this,e,o,a);if(0===i)return;if(1===i)break}a=Object.getPrototypeOf(a)}Rn(this,0,e)}},t.extend_=function(e,t,n,r){if(void 0===r&&(r=!1),!0===n&&(n=this.defaultAnnotation_),!1===n)return this.defineProperty_(e,t,r);var a=n.extend_(this,e,t,r);return a&&Rn(this,0,e),a},t.defineProperty_=function(e,t,n){void 0===n&&(n=!1);try{ut();var r=this.delete_(e);if(!r)return r;if(qt(this)){var a=Gt(this,{object:this.proxy_||this.target_,name:e,type:gn,newValue:t.value});if(!a)return null;var o=a.newValue;t.value!==o&&(t=j({},t,{value:o}))}if(n){if(!Reflect.defineProperty(this.target_,e,t))return!1}else u(this.target_,e,t);this.notifyPropertyAddition_(e,t.value)}finally{st()}return!0},t.defineObservableProperty_=function(e,t,n,r){void 0===r&&(r=!1);try{ut();var a=this.delete_(e);if(!a)return a;if(qt(this)){var o=Gt(this,{object:this.proxy_||this.target_,name:e,type:gn,newValue:t});if(!o)return null;t=o.newValue}var i=Pn(e),l={configurable:!ot.safeDescriptors||this.isPlainObject_,enumerable:!0,get:i.get,set:i.set};if(r){if(!Reflect.defineProperty(this.target_,e,l))return!1}else u(this.target_,e,l);var s=new Ue(t,n,"ObservableObject.key",!1);this.values_.set(e,s),this.notifyPropertyAddition_(e,s.value_)}finally{st()}return!0},t.defineComputedProperty_=function(e,t,n){void 0===n&&(n=!1);try{ut();var r=this.delete_(e);if(!r)return r;if(qt(this)&&!Gt(this,{object:this.proxy_||this.target_,name:e,type:gn,newValue:void 0}))return null;t.name||(t.name="ObservableObject.key"),t.context=this.proxy_||this.target_;var a=Pn(e),o={configurable:!ot.safeDescriptors||this.isPlainObject_,enumerable:!1,get:a.get,set:a.set};if(n){if(!Reflect.defineProperty(this.target_,e,o))return!1}else u(this.target_,e,o);this.values_.set(e,new We(t)),this.notifyPropertyAddition_(e,void 0)}finally{st()}return!0},t.delete_=function(e,t){if(void 0===t&&(t=!1),!N(this.target_,e))return!0;if(qt(this)&&!Gt(this,{object:this.proxy_||this.target_,name:e,type:Cn}))return null;try{var n,r;ut();var a,o=Yt(this),i=this.values_.get(e),u=void 0;if(!i&&o&&(u=null==(a=l(this.target_,e))?void 0:a.value),t){if(!Reflect.deleteProperty(this.target_,e))return!1}else delete this.target_[e];if(i&&(this.values_.delete(e),i instanceof Ue&&(u=i.value_),ft(i)),this.keysAtom_.reportChanged(),null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(e in this.target_),o){var s={type:Cn,observableKind:"object",object:this.proxy_||this.target_,debugObjectName:this.name_,oldValue:u,name:e};o&&Jt(this,s)}}finally{st()}return!0},t.observe_=function(e,t){return Xt(this,e)},t.intercept_=function(e){return Qt(this,e)},t.notifyPropertyAddition_=function(e,t){var n,r,a=Yt(this);if(a){var o=a?{type:gn,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,name:e,newValue:t}:null;a&&Jt(this,o)}null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(!0),this.keysAtom_.reportChanged()},t.ownKeys_=function(){return this.keysAtom_.reportObserved(),O(this.target_)},t.keys_=function(){return this.keysAtom_.reportObserved(),Object.keys(this.target_)},e}();function Tn(e,t){var n;if(N(e,F))return e;var r=null!=(n=null==t?void 0:t.name)?n:"ObservableObject",a=new On(e,new Map,String(r),function(e){var t;return e?null!=(t=e.defaultDecorator)?t:fe(e):void 0}(t));return k(e,F,a),e}var Nn=S("ObservableObjectAdministration",On);function Pn(e){return xn[e]||(xn[e]={get:function(){return this[F].getObservablePropValue_(e)},set:function(t){return this[F].setObservablePropValue_(e,t)}})}function Ln(e){return!!b(e)&&Nn(e[F])}function Rn(e,t,n){var r;null==(r=e.target_[I])||delete r[n]}var jn,Mn,zn=0,Dn=function(){};jn=Dn,Mn=Array.prototype,Object.setPrototypeOf?Object.setPrototypeOf(jn.prototype,Mn):void 0!==jn.prototype.__proto__?jn.prototype.__proto__=Mn:jn.prototype=Mn;var Bn=function(e){function t(t,n,r,a){var o;void 0===r&&(r="ObservableArray"),void 0===a&&(a=!1),o=e.call(this)||this;var i=new an(r,n,a,!0);if(i.proxy_=z(o),A(z(o),F,i),t&&t.length){var l=De(!0);o.spliceWithArray(0,0,t),Be(l)}return o}M(t,e);var n=t.prototype;return n.concat=function(){this[F].atom_.reportObserved();for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Array.prototype.concat.apply(this.slice(),t.map((function(e){return vn(e)?e.slice():e})))},n[Symbol.iterator]=function(){var e=this,t=0;return Gn({next:function(){return t<e.length?{value:e[t++],done:!1}:{done:!0,value:void 0}}})},R(t,[{key:"length",get:function(){return this[F].getArrayLength_()},set:function(e){this[F].setArrayLength_(e)}},{key:Symbol.toStringTag,get:function(){return"Array"}}]),t}(Dn);function In(e){u(Bn.prototype,""+e,function(e){return{enumerable:!1,configurable:!0,get:function(){return this[F].get_(e)},set:function(t){this[F].set_(e,t)}}}(e))}function Un(e){if(e>zn){for(var t=zn;t<e+100;t++)In(t);zn=e}}function Vn(e,t,n){return new Bn(e,t,n)}function Fn(e,t){if("object"==typeof e&&null!==e){if(vn(e))return void 0!==t&&r(23),e[F].atom_;if(En(e))return e[F];if(kn(e)){if(void 0===t)return e.keysAtom_;var n=e.data_.get(t)||e.hasMap_.get(t);return n||r(25,t,$n(e)),n}if(Ln(e)){if(!t)return r(26);var a=e[F].values_.get(t);return a||r(27,t,$n(e)),a}if($(e)||$e(e)||mt(e))return e}else if(g(e)&&mt(e[F]))return e[F];r(28)}function Wn(e,t){return e||r(29),void 0!==t?Wn(Fn(e,t)):$(e)||$e(e)||mt(e)||kn(e)||En(e)?e:e[F]?e[F]:void r(24,e)}function $n(e,t){var n;if(void 0!==t)n=Fn(e,t);else{if(xt(e))return e.name;n=Ln(e)||kn(e)||En(e)?Wn(e):Fn(e)}return n.name_}Object.entries(ln).forEach((function(e){var t=e[0],n=e[1];"concat"!==t&&k(Bn.prototype,t,n)})),Un(1e3);var Hn=s.toString;function Kn(e,t,n){return void 0===n&&(n=-1),qn(e,t,n)}function qn(e,t,n,r,a){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var o=typeof e;if(!g(o)&&"object"!==o&&"object"!=typeof t)return!1;var i=Hn.call(e);if(i!==Hn.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t);case"[object Map]":case"[object Set]":n>=0&&n++}e=Qn(e),t=Qn(t);var l="[object Array]"===i;if(!l){if("object"!=typeof e||"object"!=typeof t)return!1;var u=e.constructor,s=t.constructor;if(u!==s&&!(g(u)&&u instanceof u&&g(s)&&s instanceof s)&&"constructor"in e&&"constructor"in t)return!1}if(0===n)return!1;n<0&&(n=-1),a=a||[];for(var c=(r=r||[]).length;c--;)if(r[c]===e)return a[c]===t;if(r.push(e),a.push(t),l){if((c=e.length)!==t.length)return!1;for(;c--;)if(!qn(e[c],t[c],n-1,r,a))return!1}else{var f,d=Object.keys(e);if(c=d.length,Object.keys(t).length!==c)return!1;for(;c--;)if(!N(t,f=d[c])||!qn(e[f],t[f],n-1,r,a))return!1}return r.pop(),a.pop(),!0}function Qn(e){return vn(e)?e.slice():E(e)||kn(e)||x(e)||En(e)?Array.from(e.entries()):e}function Gn(e){return e[Symbol.iterator]=Yn,e}function Yn(){return this}if(["Symbol","Map","Set","Symbol"].forEach((function(e){void 0===o()[e]&&r("MobX requires global '"+e+"' to be available or polyfilled")})),"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:function(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}},extras:{getDebugName:$n},$mobx:F}),!e.useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!function(e,t,n){var r=Tn(e,n)[F];ut();try{null!=t||(t=function(e){return N(e,I)||k(e,I,j({},e[I])),e[I]}(e)),O(t).forEach((function(e){return r.make_(e,t[e])}))}finally{st()}return e})throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");function Xn(e){e()}var Jn=[];function Zn(e){return jt(Fn(e,t));var t}var er="undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry;function tr(e){return{reaction:e,mounted:!1,changedBeforeMount:!1,cleanAt:Date.now()+nr}}var nr=1e4,rr=er?function(e){var t=new Map,n=1,r=new e((function(e){var n=t.get(e);n&&(n.reaction.dispose(),t.delete(e))}));return{addReactionToTrack:function(e,a,o){var i=n++;return r.register(o,i,e),e.current=tr(a),e.current.finalizationRegistryCleanupToken=i,t.set(i,e.current),e.current},recordReactionAsCommitted:function(e){r.unregister(e),e.current&&e.current.finalizationRegistryCleanupToken&&t.delete(e.current.finalizationRegistryCleanupToken)},forceCleanupTimerToRunNowForTests:function(){},resetCleanupScheduleForTests:function(){}}}(er):function(){var e,t=new Set;function n(){void 0===e&&(e=setTimeout(r,1e4))}function r(){e=void 0;var r=Date.now();t.forEach((function(e){var n=e.current;n&&r>=n.cleanAt&&(n.reaction.dispose(),e.current=null,t.delete(e))})),t.size>0&&n()}return{addReactionToTrack:function(e,r,a){var o;return e.current=tr(r),o=e,t.add(o),n(),e.current},recordReactionAsCommitted:function(e){t.delete(e)},forceCleanupTimerToRunNowForTests:function(){e&&(clearTimeout(e),r())},resetCleanupScheduleForTests:function(){var n,r;if(t.size>0){try{for(var a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),o=a.next();!o.done;o=a.next()){var i=o.value,l=i.current;l&&(l.reaction.dispose(),i.current=null)}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}t.clear()}e&&(clearTimeout(e),e=void 0)}}}(),ar=rr.addReactionToTrack,or=rr.recordReactionAsCommitted,ir=(rr.resetCleanupScheduleForTests,rr.forceCleanupTimerToRunNowForTests,!1);function lr(){return ir}function ur(e){return"observer"+e}var sr=function(){};function cr(t,n){if(void 0===n&&(n="observed"),lr())return t();var r,a=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}(e.useState(new sr),1)[0],o=(r=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}((0,e.useState)(0),2)[1],(0,e.useCallback)((function(){r((function(e){return e+1}))}),Jn)),i=e.useRef(null);if(!i.current)var l=new dt(ur(n),(function(){u.mounted?o():u.changedBeforeMount=!0})),u=ar(i,l,a);var s,c,f=i.current.reaction;if(e.useDebugValue(f,Zn),e.useEffect((function(){return or(i),i.current?(i.current.mounted=!0,i.current.changedBeforeMount&&(i.current.changedBeforeMount=!1,o())):(i.current={reaction:new dt(ur(n),(function(){o()})),mounted:!0,changedBeforeMount:!1,cleanAt:1/0},o()),function(){i.current.reaction.dispose(),i.current=null}}),[]),f.track((function(){try{s=t()}catch(e){c=e}})),c)throw c;return s}var fr=function(){return(fr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},dr={$$typeof:!0,render:!0,compare:!0,type:!0};function pr(e){return function(e){if(Array.isArray(e))return mr(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||vr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||vr(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function vr(e,t){if(e){if("string"==typeof e)return mr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mr(e,t):void 0}}function mr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}!function(e){e||(e=Xn),Lt({reactionScheduler:e})}(t.unstable_batchedUpdates);const gr=function(t,n){if(lr())return t;var r,a,o,i=fr({forwardRef:!1},void 0),l=t.displayName||t.name,u=function(e,n){return cr((function(){return t(e)}),l)};return u.displayName=l,r=i.forwardRef?(0,e.memo)((0,e.forwardRef)(u)):(0,e.memo)(u),a=t,o=r,Object.keys(a).forEach((function(e){dr[e]||Object.defineProperty(o,e,Object.getOwnPropertyDescriptor(a,e))})),r.displayName=l,r}((function(t){var n=t.store,r=hr((0,e.useState)(""),2),a=r[0],o=r[1],i=hr((0,e.useState)(""),2),l=i[0],u=i[1],s=hr((0,e.useState)(""),2),c=s[0],f=s[1],d=hr((0,e.useState)([]),2),p=d[0],h=d[1],v=hr((0,e.useState)([]),2),m=v[0],g=v[1],y=[];function b(){a.length>0&&(n.todoStore.create(a,l,p),o(""),u(""),h([]))}return m.length?m.forEach((function(e){n.todoStore.todos.forEach((function(t){t.types.forEach((function(n){n.id===e.id&&0===y.filter((function(e){return e.id===t.id})).length&&y.push(t)}))}))})):y=pr(n.todoStore.todos),e.createElement("div",{className:"container"},e.createElement("h2",{className:"page-title"},"Список дел"),e.createElement("div",{className:"add-todo"},e.createElement("h3",{className:"add-todo__header"},"Добавить дело"),e.createElement("div",{className:"add-todo__block"},e.createElement("label",{className:"add-todo__label",htmlFor:"title"},"Название дела (не может быть пустым)"),e.createElement("input",{className:"add-todo__title",type:"text",name:"title",value:a,onChange:function(e){o(e.target.value)},onKeyPress:function(e){e.ctrlKey&&"Enter"===e.key&&b()}})),e.createElement("div",{className:"add-todo__block"},e.createElement("label",{className:"add-todo__label",htmlFor:"description"},"Описание"),e.createElement("textarea",{className:"add-todo__textarea",name:"description",value:l,onChange:function(e){u(e.target.value)},onKeyPress:function(e){e.ctrlKey&&"Enter"===e.key&&b()}})),e.createElement("div",{className:"add-todo__block"},e.createElement("label",{className:"add-todo__label",htmlFor:"types"},"Тип дела"),e.createElement("div",{className:"add-todo__types"},p.map((function(t){return e.createElement("span",{className:"type",key:t.id,onClick:function(e){h(pr(p.filter((function(e){return e.id!==t.id}))))}},t.title)})))),e.createElement("div",{className:"add-todo__block"},e.createElement("div",{className:"add-todo__add-type"},e.createElement("span",null,"Добавить"),e.createElement("input",{type:"text",value:c,onChange:function(e){f(e.target.value)},onKeyPress:function(e){"Enter"===e.key&&(n.todoStore.createType(c),f("")),e.ctrlKey&&"Enter"===e.key&&b()}})),e.createElement("div",{className:"add-todo__types"},n.todoStore.todoTypes.map((function(t){return e.createElement("span",{className:"type",key:t.id,onClick:function(e){0===p.filter((function(e){return e.id===t.id})).length&&h([].concat(pr(p),[t]))}},t.title,e.createElement("button",{onClick:function(e){e.stopPropagation(),n.todoStore.removeType(t.id)}},"X"))})))),e.createElement("button",{className:"add-todo__add-button",onClick:b},"Добавить задачу (ctrl + Enter)")),e.createElement("div",{className:"todo-list"},e.createElement("h3",{className:"todo-list__header"},"Список дел (всего ",n.todoStore.totalTodos," шт.)"),m.length?e.createElement("div",null,e.createElement("h4",null,"Показанны только"),e.createElement("div",null,m.map((function(t){return e.createElement("span",{className:"type",key:t.id},t.title,e.createElement("button",{onClick:function(e){g(pr(m.filter((function(e){return e.id!==t.id}))))}},"X"))})))):null,y.map((function(t){return e.createElement("div",{className:t.completed?"todo-item todo-item--complete":"todo-item",key:t.id},e.createElement("div",{className:"todo-item__header"},e.createElement("span",{className:"todo-item__status"},t.completed?"Готово":"В процессе"),e.createElement("span",{className:"todo-item__title"},t.title)),e.createElement("p",{className:"todo-item__text"},t.text),e.createElement("div",{className:"todo-item__types"},t.types.map((function(t){return e.createElement("span",{className:"type",key:t.id,onClick:function(e){0===m.filter((function(e){return e.id===t.id})).length&&g([].concat(pr(m),[t]))}},t.title)}))),e.createElement("div",{className:"todo-item__footer"},e.createElement("span",{className:"todo-item__btn",onClick:function(e){t.toggleCompleted()}},t.completed?"Возобновить":"Завершить"),e.createElement("span",{className:"todo-item__btn",onClick:function(e){n.todoStore.remove(t.id)}},"Удалить")))}))))}));function yr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function br(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _r(e,t,n){return t&&br(e.prototype,t),n&&br(e,n),e}function wr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var kr=function(){function e(t){yr(this,e),wr(this,"defaultTodoTypes",[new Sr("Важное"),new Sr("Приятное")]),wr(this,"todos",[new Ar("Создать новую задачу","Удалить эту задачу и создать новую",[this.defaultTodoTypes[0]]),new Ar("Нажать на тип задачи","Увидеть как задачи фильтруются по типу",[this.defaultTodoTypes[1]])]),wr(this,"todoTypes",this.defaultTodoTypes),en(this,{rootStore:!1}),this.rootStore=t}return _r(e,[{key:"create",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],r=new Ar(e,t,n);return this.todos.push(r),r}},{key:"totalTodos",get:function(){return this.todos.length}},{key:"remove",value:function(e){this.todos=this.todos.filter((function(t){return t.id!==e}))}},{key:"removeType",value:function(e){this.todoTypes=this.todoTypes.filter((function(t){return t.id!==e}))}},{key:"createType",value:function(e){var t=new Sr(e);this.todoTypes.push(t)}}]),e}(),Ar=function(){function e(t,n,r){yr(this,e),wr(this,"completed",!1),wr(this,"types",[]),en(this),this.id=Math.random().toString(),this.title=t,this.text=n,this.types=r}return _r(e,[{key:"toggleCompleted",value:function(){this.completed=!this.completed}},{key:"edit",value:function(e,t){this.title=e,this.text=t}}]),e}(),Sr=function e(t){yr(this,e),wr(this,"title",""),this.id=Math.random().toString(),this.title=t},Er=n(379),xr=n.n(Er),Cr=n(315);xr()(Cr.Z,{insert:"head",singleton:!1}),Cr.Z.locals;var Or=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.todoStore=new kr(this)};(0,t.render)(e.createElement(gr,{store:Or}),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,